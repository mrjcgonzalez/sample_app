<!DOCTYPE html>
<!-- saved from url=(0049)https://www.railstutorial.org/book/modeling_users -->
<html id="custDomain"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/6713.js" async="" type="text/javascript"></script><script id="facebook-jssdk" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/sdk.js"></script><script id="twitter-wjs" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/widgets.js"></script><script async="" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/analytics.js"></script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-2.newrelic.com","errorBeacon":"bam.nr-data.net","licenseKey":"1310fd97f1","applicationID":"4014257","transactionName":"IVZWR0tbWF4BFxhWVw1SSxxaQUdGCwhoRl0DXQ==","queueTime":16,"applicationTime":702,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-460.min.js"}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(t,n,e){function r(e){if(!n[e]){var o=n[e]={exports:{}};t[e][0].call(o.exports,function(n){var o=t[e][1][n];return r(o?o:n)},o,o.exports)}return n[e].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<e.length;o++)r(e[o]);return r}({QJf3ax:[function(t,n){function e(t){function n(n,e,o){t&&t(n,e,o),o||(o={});for(var a=i(n),u=a.length,c=o[r]||(o[r]={}),f=0;u>f;f++)a[f].apply(c,e);return c}function o(t,n){u[t]=i(t).concat(n)}function i(t){return u[t]||[]}function a(){return e(n)}var u={};return{on:o,emit:n,create:a,listeners:i,_events:u}}var r="nr@context";n.exports=e()},{}],ee:[function(t,n){n.exports=t("QJf3ax")},{}],D5DuLP:[function(t,n){function e(t,n,e){return r.listeners(t).length?r.emit(t,n,e):(o[t]||(o[t]=[]),void o[t].push(n))}var r=t("ee").create(),o={};n.exports=e,e.ee=r,r.q=o},{ee:"QJf3ax"}],handle:[function(t,n){n.exports=t("D5DuLP")},{}],loader:[function(t,n){n.exports=t("G9z0Bl")},{}],G9z0Bl:[function(t,n){function e(){var t=l.info=NREUM.info;if(t&&t.agent&&t.licenseKey&&t.applicationID&&c&&c.body){l.proto="https"===p.split(":")[0]||t.sslForHttp?"https://":"http://",a("mark",["onload",i()]);var n=c.createElement("script");n.src=l.proto+t.agent,c.body.appendChild(n)}}function r(){"complete"===c.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),u=window,c=u.document,f="addEventListener",s="attachEvent",p=(""+location).split("?")[0],l=n.exports={offset:i(),origin:p,features:{}};c[f]?(c[f]("DOMContentLoaded",o,!1),u[f]("load",e,!1)):(c[s]("onreadystatechange",r),u[s]("onload",e)),a("mark",["firstbyte",i()])},{handle:"D5DuLP"}]},{},["G9z0Bl"]);</script>
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/1197428788.js" type="text/javascript"></script>

<title>Chapter 6: Modeling users
 | Ruby on Rails Tutorial | Softcover.io</title>
<meta charset="UTF-8">
<script>
  window.Config = {
    bucket: "softcover",
    previewBucket: "softcover-cloud"
  }
</script>
<link href="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/reading-cafd24104a089602d0a172ca68842caa.css" media="screen" rel="stylesheet" type="text/css">
<link href="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/print-ca85c1c74168e935ca4e2e958a3a5c2b.css" media="print" rel="stylesheet" type="text/css">
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/jquery-2.0.3.min.js" type="text/javascript"></script>
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/jquery.formalize.min.js" type="text/javascript"></script>
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/underscore-min.js" type="text/javascript"></script>
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/saved_resource" type="text/javascript"></script>
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/application-421b8f03ce26eb063e368f7b25f462e7.js" type="text/javascript"></script>
<meta content="authenticity_token" name="csrf-param">
<meta content="cTLway/SSF2E5dRT1wq657vmthApk/dym1gBDH3aeSA=" name="csrf-token">
<link href="https://www.railstutorial.org/apple-touch-icon-precomposed.png" rel="apple-touch-icon-precomposed">
<meta content="http://www.railstutorial.org" property="og:url">
<meta content="Ruby on Rails Tutorial" property="og:title">
<meta content="**Note: The 3rd edition is currently in preparation; you may want to delay your purchase a couple of months to wait for its release. [Sign up here](https://draft.railstutorial.org/#email) for a notification and coupon code. See the [3rd edition announcement](http://news.railstutorial.org/rails_tutorial_3rd_edition/) for more information.** The Ruby on Rails Tutorial book and screencast series teach you how to develop and deploy real, industrial-strength web applications with Ruby on Rails, the open-source web framework that powers top websites such as Twitter, Hulu, GitHub, and the Yellow Pages. The Ruby on Rails Tutorial book is available for free online and is available for purchase as an ebook (PDF, EPUB, and MOBI formats). The companion screencast series includes 15 individual lessons (including a new Rails 4.0 supplement) totaling more than 15 hours, with one lesson for each chapter of the Ruby on Rails Tutorial book. The best value is the ebook/screencast bundle, which includes the 2nd edition book, the Rails 4.0–compatible version, the 2nd edition screencast series, and the Rails 4.0 supplementary screencasts." property="og:description">
<meta content="Softcover.io" property="og:site_name">
<meta content="https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/images/cover-web.png" property="og:image">
<meta content="https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/images/cover-web.png" property="og:image:secure_url">
<meta content="image/png" property="og:image:type">
<meta content="500" property="og:image:width">
<meta content="500" property="og:image:height">
<link href="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/css" rel="stylesheet" type="text/css">
<link href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/jsapi" type="text/javascript"></script>
<script>
  // test key only
  // this identifies your website in the createToken call below
  Stripe.setPublishableKey('pk_live_Xn1p0BfxqKxkAxtEr03P7wmd');
</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('require', 'linker');
  ga('linker:autoLink', ['www.railstutorial.org', 'softcover.io']);

  ga('create', 'UA-46858978-1', 'softcover.io', {'allowLinker': true});
  ga('send', 'pageview');

  ga('create', 'UA-8667566-1', 'auto', {
    'name': 'book',
    'allowLinker': true
  });

  ga('book.send', 'pageview');

</script>
<script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script>


<script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/custom_domain_js.js" type="text/javascript"></script>
<script id="mathJaxJS" type="text/javascript" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/MathJax.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Hover_Arrow {position: absolute; width: 15px; height: 11px; cursor: pointer}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f2f2f2;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #3b5998;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{max-height:590px;min-height:590px;max-width:500px;min-width:500px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;left:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29447e;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f2f2f2;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://fbstatic-a.akamaihd.net/rsrc.php/v2/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}
.fbpluginrecommendationsbarleft,.fbpluginrecommendationsbarright{position:fixed !important;bottom:0;z-index:999}.fbpluginrecommendationsbarleft{left:10px}.fbpluginrecommendationsbarright{right:10px}</style></head>
<body data-twttr-rendered="true"><div id="MathJax_Message" style="display: none;"></div>
<script type="text/javascript">
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
window.fbAsyncInit = function() {
FB.init({
appId      : '145973438749643',
xfbml      : true,
version    : 'v2.0'
});
};
(function(d, s, id){
var js, fjs = d.getElementsByTagName(s)[0];
if (d.getElementById(id)) {return;}
js = d.createElement(s); js.id = id;
js.src = "//connect.facebook.net/en_US/sdk.js";
fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
</script>
<div class="closeLeft container">
<div class="container_footer">
<div id="header">
<div class="wrapper">
<a href="https://www.railstutorial.org/" class="logo"><img alt="Logo" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/logo-e741419bc04d21db7e60ddc10883b4f9.png">
</a><a href="javascript://" id="mobileMenu"><div class="closedMenu">
≡
<span>Menu</span>
</div>
<div class="openMenu">
x
<span>Close</span>
</div>
</a><div class="j_userHeader closeLeft" style="display:inline"><ul class="headerMenu">
<li><a href="https://www.softcover.io/login">Log In</a></li>
<li><a href="https://www.softcover.io/account/sign_up">Sign Up</a></li>
</ul>
</div>
<div id="dropBG"></div>
<div class="clear"></div>
</div>
</div>

<div id="pageBook">
<div id="bookHeader">
<div class="wrapper">
<div class="bookCover">
<a href="https://www.railstutorial.org/book"><img alt="Cover-web" class="cover" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/cover-web.png">
<img alt="Cover_bg" class="coverBG" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/cover_bg-88b6816f72bba1e853bbfcd1caff472a.png">
<p>
<i class="ibooksMedia iRead"></i>
READ ONLINE FREE
</p>
</a></div>
<div class="bookInfo">
<h1>
Ruby on Rails Tutorial
<span class="j_subtitle">Learn Rails by Example</span>
<strong>Michael Hartl</strong>
</h1>
<p class="j_description">
 <strong>Note: The 3rd edition is currently in preparation; you may want to delay your purchase a couple of months to wait for its release. <a href="https://draft.railstutorial.org/#email">Sign up here</a> for a notification and coupon code. See the <a href="http://news.railstutorial.org/rails_tutorial_3rd_edition/">3rd edition announcement</a> for more information.</strong> The Ruby on Rails Tutorial book and screencast series teach you how to develop and deploy real, industrial-strength web applications with Ruby on Rails, the open-source web framework that powers top websites such as Twitter, Hulu, GitHub, and the Yellow Pages. The Ruby on Rails Tutorial book is available for free online and is available for purchase as an ebook (PDF, EPUB, and MOBI formats). The companion screencast series includes 15 individual lessons (including a new Rails 4.0 supplement) totaling more than 15 hours, with one lesson for each chapter of the Ruby on Rails Tutorial book. The best value is the ebook/screencast bundle, which includes the 2nd edition book, the Rails 4.0–compatible version, the 2nd edition screencast series, and the Rails 4.0 supplementary screencasts. 
</p>

<div class="bookControls">
<a href="https://www.railstutorial.org/"><button class="transBG">Book Info</button>
</a><a href="mailto:admin@railstutorial.org"><button class="transBG">Contact Author</button>
</a></div>

</div>

</div>
</div>

<div id="bookMenu" class="bookMenuFixed">
<div class="wrapper">
<div class="bookMenuControls">
<div class="bookMenuArows">
<a href="javascript://" class="leftArrow">◄</a>
<a href="javascript://" class="upArrow">▲</a>
<a href="javascript://" class="rightArrow">►</a>
</div>
<div class="bookMenuSize">
<a href="javascript://" class="current" id="sizeRegular"></a>
<a href="javascript://" id="sizeBig"></a>
<a href="javascript://" id="sizeBigger"></a>
</div>
<div class="bookMenuSearch">
<a href="javascript://" id="j_singlePage"><i class="fa fa-search"></i>
Single Page
</a></div>
</div>
<div class="dropDown" id="j_chapterDropDown">
<span id="chapterTitle">Chapter 6: Modeling users
</span>
<ul class="dropMenu"><li><a>Frontmatter
</a></li><li><a>Chapter 1: From zero to deploy
</a></li><li><a>Chapter 2: A demo app
</a></li><li><a>Chapter 3: Mostly static pages
</a></li><li><a>Chapter 4: Rails-flavored Ruby
</a></li><li><a>Chapter 5: Filling in the layout
</a></li><li><a>Chapter 6: Modeling users
</a></li><li><a>Chapter 7: Sign up
</a></li><li><a>Chapter 8: Sign in, sign out
</a></li><li><a>Chapter 9: Updating, showing, and deleting users
</a></li><li><a>Chapter 10: User microposts
</a></li><li><a>Chapter 11: Following users
</a></li></ul>
</div>
<div class="bookMenuActions j_downloadLinks"><a href="" onclick="$(&#39;#bookMenuEmail&#39;).toggleClass(&#39;open&#39;); return false"><button class="greyButton iEmailUpdate">❤</button>
</a><a href="https://www.railstutorial.org/#pricing" class="buttonStyle attention">Buy Now</a>
<a href="https://www.softcover.io/downloads/28fdb94f/ruby_on_rails_tutorial"><button>Download Previews</button>
</a></div>
</div>
<div class="animated" id="bookMenuEmail">
<div class="wrapper">
<label>Follow this book to receive email updates from the author.</label>
<div class="j_followBookForm"><form accept-charset="UTF-8" action="https://www.softcover.io/follow/28fdb94f/ruby_on_rails_tutorial" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="✓"></div>
<!-- %input{name: "name", type: "text", placeholder: "YOUR NAME"} -->
<input name="email" placeholder="YOUR EMAIL ADDRESS" type="text">
<input class="greyButton optClick_follow" type="submit" value="Follow Book">
</form>

</div>
</div>
</div>
</div>
<div class="wrapper" id="bookWr">
<div class="bookChapterTop">Chapter 6: Modeling users
</div>
<div id="bookHtml" style="opacity: 1;"><div id="book"><div id="_cha-modeling_users" data-tralics-id="cid33" class="chapter" data-number="6" data-chapter="modeling_users"><h1><a href="https://www.railstutorial.org/book/modeling_users#cha-modeling_users" class="heading hyperref"><span class="number">Chapter 6 </span>Modeling users</a></h1>
<p><strong>Note: <a href="http://draft.railstutorial.org/book" target="_blank">Draft chapters</a> of the 3rd edition of the </strong><em><strong>Ruby on Rails Tutorial</strong></em><strong> are now available.<span class="intersentencespace"></span> See the <a href="http://news.railstutorial.org/rails_tutorial_3rd_edition/" target="_blank">3rd edition announcement</a> for more details.</strong></p>
<p>In <a href="https://www.railstutorial.org/book/filling_in_the_layout#cha-filling_in_the_layout" class="hyperref">Chapter&nbsp;<span class="ref">5</span></a>, we ended with a stub page for creating new users (<a href="https://www.railstutorial.org/book/filling_in_the_layout#sec-user_signup" class="hyperref">Section&nbsp;<span class="ref">5.4</span></a>); over the course of the next four chapters, we’ll fulfill the promise implicit in this incipient signup page.<span class="intersentencespace"></span> In this chapter, we’ll take the first critical step by creating a <em>data model</em> for users of our site, together with a way to store that data.<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/sign_up#cha-sign_up" class="hyperref">Chapter&nbsp;<span class="ref">7</span></a>, we’ll give users the ability to sign up for our site and create a user profile page.<span class="intersentencespace"></span> Once users can sign up, we’ll let them sign in and sign out as well (<a href="https://www.railstutorial.org/book/sign_in_out#cha-sign_in_sign_out" class="hyperref">Chapter&nbsp;<span class="ref">8</span></a>), and in <a href="https://www.railstutorial.org/book/updating_and_deleting_users#cha-updating_showing_and_deleting_users" class="hyperref">Chapter&nbsp;<span class="ref">9</span></a> (<a href="https://www.railstutorial.org/book/updating_and_deleting_users#sec-requiring_signed_in_users" class="hyperref">Section&nbsp;<span class="ref">9.2.1</span></a>) we’ll learn how to protect pages from improper access.<span class="intersentencespace"></span> Taken together, the material in <a href="https://www.railstutorial.org/book/modeling_users#cha-modeling_users" class="hyperref">Chapter&nbsp;<span class="ref">6</span></a> through <a href="https://www.railstutorial.org/book/updating_and_deleting_users#cha-updating_showing_and_deleting_users" class="hyperref">Chapter&nbsp;<span class="ref">9</span></a> develops a full Rails login and authentication system.<span class="intersentencespace"></span> As you may know, there are various pre-built authentication solutions for Rails; <a href="https://www.railstutorial.org/book/modeling_users#sidebar-roll_your_own" class="hyperref">Box&nbsp;<span class="ref">6.1</span></a> explains why, at least at first, it’s probably a better idea to roll your own.</p>
<p>This is a long and action-packed chapter, and you may find it unusually challenging, especially if you are new to data modeling.<span class="intersentencespace"></span> By the end of it, though, we will have created an industrial-strength system for validating, storing, and retrieving user information.</p>
<div class="aside" id="_sidebar-roll_your_own" data-tralics-id="uid422" data-number="6.1"><div class="heading"><span class="number">Box 6.1.</span> 

<span class="description">Roll your own authentication system</span></div>
<p>Virtually all web applications require a login and authentication system of some sort.<span class="intersentencespace"></span> As a result, most web frameworks have a plethora of options for implementing such systems, and Rails is no exception.<span class="intersentencespace"></span> Examples of authentication and authorization systems include <a href="http://github.com/thoughtbot/clearance" target="_blank">Clearance</a>, <a href="http://github.com/binarylogic/authlogic" target="_blank">Authlogic</a>, <a href="http://github.com/plataformatec/devise" target="_blank">Devise</a>, and <a href="http://railscasts.com/episodes/192-authorization-with-cancan" target="_blank">CanCan</a> (as well as non-Rails-specific solutions built on top of <a href="http://en.wikipedia.org/wiki/OpenID" target="_blank">OpenID</a> or <a href="http://en.wikipedia.org/wiki/Oauth" target="_blank">OAuth</a>).<span class="intersentencespace"></span> It’s reasonable to ask why we should reinvent the wheel.<span class="intersentencespace"></span> Why not just use an off-the-shelf solution instead of rolling our own?</p>
<p>For one, practical experience shows that authentication on most sites requires extensive customization, and modifying a third-party product is often more work than writing the system from scratch.<span class="intersentencespace"></span> In addition, off-the-shelf systems can be “black boxes”, with potentially mysterious innards; when you write your own system, you are far more likely to understand it.<span class="intersentencespace"></span> Moreover, recent additions to Rails (<a href="https://www.railstutorial.org/book/modeling_users#sec-adding_a_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3</span></a>) make it easy to write a custom authentication system.<span class="intersentencespace"></span> Finally, if you <em>do</em> end up using a third-party system later on, you’ll be in a much better position to understand and modify it if you’ve first built one yourself.<span class="intersentencespace"></span></p>

</div><p>As usual, if you’re following along using Git for version control, now would be a good time to make a topic branch for modeling users:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git checkout -b modeling-users
</pre></div></div>
<p>(The first line here is just to make sure that you start on the master branch, so that the <code>modeling-users</code> topic branch is based on <code>master</code>.<span class="intersentencespace"></span> You can skip that command if you’re already on the master branch.)</p>
</div><div id="_sec-user_model" data-tralics-id="cid34" class="section" data-number="6.1"><h2><a href="https://www.railstutorial.org/book/modeling_users#sec-user_model" class="heading hyperref"><span class="number">6.1 </span>User model</a></h2>
<p>Although the ultimate goal of the next three chapters is to make a signup page for our site (mocked up in <a href="https://www.railstutorial.org/book/modeling_users#fig-signup_mockup_preview" class="hyperref">Figure&nbsp;<span class="ref">6.1</span></a>), it would do little good now to accept information for new users: we don’t currently have any place to put it.<span class="intersentencespace"></span> Thus, the first step in signing up users is to make a data structure to capture and store their information.</p>
<div class="center figure" id="_fig-signup_mockup_preview" data-tralics-id="uid423" data-number="6.1">
<div class="graphics image box"><img src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/signup_mockup_bootstrap.png" alt="images/figures/signup_mockup_bootstrap"></div><div class="caption"><span class="header">Figure 6.1: </span><span class="description">A mockup of the user signup page.
</span></div></div>
<p>In Rails, the default data structure for a data model is called, naturally enough, a&nbsp;<em>model</em> (the M in MVC from <a href="https://www.railstutorial.org/book/beginning#sec-mvc" class="hyperref">Section&nbsp;<span class="ref">1.2.6</span></a>).<span class="intersentencespace"></span> The default Rails solution to the problem of persistence is to use a <em>database</em> for long-term data storage, and the default library for interacting with the database is called <em>Active Record</em>.<sup id="_cha-6_footnote-ref-1" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-1">1</a></sup><span class="intersentencespace"></span> Active Record comes with a host of methods for creating, saving, and finding data objects, all without having to use the structured query language (SQL)<sup id="_cha-6_footnote-ref-2" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-2">2</a></sup> used by <a href="http://en.wikipedia.org/wiki/Relational_database" target="_blank">relational databases</a>.<span class="intersentencespace"></span> Moreover, Rails has a feature called <em>migrations</em> to allow data definitions to be written in pure Ruby, without having to learn an SQL data definition language (DDL).<span class="intersentencespace"></span> The effect is that Rails insulates you almost entirely from the details of the data store.<span class="intersentencespace"></span> In this book, by using SQLite for development and PostgreSQL (via Heroku) for deployment (<a href="https://www.railstutorial.org/book/beginning#sec-deploying" class="hyperref">Section&nbsp;<span class="ref">1.4</span></a>), we have developed this theme even further, to the point where we barely ever have to think about how Rails stores data, even for production applications.</p>
<div id="_sec-database_migrations" data-tralics-id="uid426" class="subsection" data-number="6.1.1"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-database_migrations" class="heading hyperref"><span class="number">6.1.1 </span>Database migrations</a></h3>
<p>You may recall from <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_user_class" class="hyperref">Section&nbsp;<span class="ref">4.4.5</span></a> that we have already encountered, via a custom-built <code>User</code> class, user objects with <code>name</code> and <code>email</code> attributes.<span class="intersentencespace"></span> That class served as a useful example, but it lacked the critical property of <em>persistence</em>: when we created a User object at the Rails console, it disappeared as soon as we exited.<span class="intersentencespace"></span> Our goal in this section is to create a model for users that won’t disappear quite so easily.</p>
<p>As with the User class in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_user_class" class="hyperref">Section&nbsp;<span class="ref">4.4.5</span></a>, we’ll start by modeling a user with two attributes, a <code>name</code> and an <code>email</code> address, the latter of which we’ll use as a unique username.<sup id="_cha-6_footnote-ref-3" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-3">3</a></sup><span class="intersentencespace"></span> (We’ll add an attribute for passwords in <a href="https://www.railstutorial.org/book/modeling_users#sec-adding_a_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3</span></a>.)<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/rails_flavored_ruby#code-example_user" class="hyperref">Listing&nbsp;<span class="ref">4.9</span></a>, we did this with Ruby’s <code>attr_accessor</code> method:</p>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div>
<p>In contrast, when using Rails to model users we don’t need to identify the attributes explicitly.<span class="intersentencespace"></span> As noted briefly above, to store data Rails uses a relational database by default, which consists of <em>tables</em> composed of data <em>rows</em>, where each row has <em>columns</em> of data attributes.<span class="intersentencespace"></span> For example, to store users with names and email addresses, we’ll create a <code>users</code> table with <code>name</code> and <code>email</code> columns (with each row corresponding to one user).<span class="intersentencespace"></span> By naming the columns in this way, we’ll let Active Record figure out the User object attributes for us.</p>
<p>Let’s see how this works.<span class="intersentencespace"></span> (If this discussion gets too abstract for your taste, be patient; the console examples starting in <a href="https://www.railstutorial.org/book/modeling_users#sec-creating_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.3</span></a> and the database browser screenshots in <a href="https://www.railstutorial.org/book/modeling_users#fig-sqlite_database_browser" class="hyperref">Figure&nbsp;<span class="ref">6.3</span></a> and <a href="https://www.railstutorial.org/book/modeling_users#fig-sqlite_user_row" class="hyperref">Figure&nbsp;<span class="ref">6.6</span></a> should make things clearer.)<span class="intersentencespace"></span> You may recall from <a href="https://www.railstutorial.org/book/filling_in_the_layout#code-generate_users_controller" class="hyperref">Listing&nbsp;<span class="ref">5.31</span></a> that we created a Users controller (along with a <code>new</code> action) using the command</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate controller Users new --no-test-framework
</pre></div></div>
<p>There is an analogous command for making a model: <code>generate model</code>.<span class="intersentencespace"></span> <a href="https://www.railstutorial.org/book/modeling_users#code-generate_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.1</span></a> shows the command to generate a User model with two attributes, <code>name</code> and <code>email</code>.</p>
<div class="codelisting" id="_code-generate_user_model" data-tralics-id="uid428" data-number="6.1"><div class="heading"><span class="number">Listing 6.1:</span> 

<span class="description">Generating a User model.</span>
</div>

<div class="code"><div class="highlight"><pre>$ rails generate model User name:string email:string
      invoke  active_record
      create    db/migrate/[timestamp]_create_users.rb
      create    app/models/user.rb
      invoke    rspec
      create      spec/models/user_spec.rb
</pre></div></div></div><p>(Note that, in contrast to the plural convention for controller names, model names are singular: a Users controller, but a User model.)<span class="intersentencespace"></span> By passing the optional parameters <code>name:string</code> and <code>email:string</code>, we tell Rails about the two attributes we want, along with what types those attributes should be (in this case, <code>string</code>).<span class="intersentencespace"></span> Compare this with including the action names in <a href="https://www.railstutorial.org/book/static_pages#code-generating_pages" class="hyperref">Listing&nbsp;<span class="ref">3.4</span></a> and <a href="https://www.railstutorial.org/book/filling_in_the_layout#code-generate_users_controller" class="hyperref">Listing&nbsp;<span class="ref">5.31</span></a>.</p>
<p>One of the results of the <code>generate</code> command in <a href="https://www.railstutorial.org/book/modeling_users#code-generate_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.1</span></a> is a new file called a <em>migration</em>.<span class="intersentencespace"></span> Migrations provide a way to alter the structure of the database incrementally, so that our data model can adapt to changing requirements.<span class="intersentencespace"></span> In the case of the User model, the migration is created automatically by the model generation script; it creates a <code>users</code> table with two columns, <code>name</code> and <code>email</code>, as shown in <a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a>.<span class="intersentencespace"></span> (We’ll see in <a href="https://www.railstutorial.org/book/modeling_users#sec-uniqueness_validation" class="hyperref">Section&nbsp;<span class="ref">6.2.5</span></a> and again in <a href="https://www.railstutorial.org/book/modeling_users#sec-adding_a_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3</span></a> how to make a migration from scratch.)</p>
<div class="codelisting" id="_code-users_migration" data-tralics-id="uid429" data-number="6.2"><div class="heading"><span class="number">Listing 6.2:</span> 

<span class="description">Migration for the User model (to create a <code>users</code> table).<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">db/migrate/[timestamp]_create_users.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:users</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:email</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>Note that the name of the migration file is prefixed by a <em>timestamp</em> based on when the migration was generated.<span class="intersentencespace"></span> In the early days of migrations, the filenames were prefixed with incrementing integers, which caused conflicts for collaborating teams if multiple programmers had migrations with the same number.<span class="intersentencespace"></span> Barring the improbable scenario of migrations generated the same second, using timestamps conveniently avoids such collisions.</p>
<p>The migration itself consists of a <code>change</code> method that determines the change to be made to the database.<span class="intersentencespace"></span> In the case of <a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a>, <code>change</code> uses a Rails method called <code>create_table</code> to create a <em>table</em> in the database for storing users.<span class="intersentencespace"></span> The <code>create_table</code> method accepts a block (<a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-blocks" class="hyperref">Section&nbsp;<span class="ref">4.3.2</span></a>) with one block variable, in this case called <code>t</code> (for “table”).<span class="intersentencespace"></span> Inside the block, the <code>create_table</code> method uses the <code>t</code>&nbsp;object to create <code>name</code> and <code>email</code> columns in the database, both of type <code>string</code>.<sup id="_cha-6_footnote-ref-4" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-4">4</a></sup><span class="intersentencespace"></span> Here the table name is plural (<code>users</code>) even though the model name is singular (User), which reflects a linguistic convention followed by Rails: a model represents a single user, whereas a database table consists of many users.<span class="intersentencespace"></span> The final line in the block, <code>t.timestamps</code>, is a special command that creates two <em>magic columns</em> called <code>created_at</code> and <code>updated_at</code>, which are timestamps that automatically record when a given user is created and updated.<span class="intersentencespace"></span> (We’ll see concrete examples of the magic columns starting in <a href="https://www.railstutorial.org/book/modeling_users#sec-creating_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.3</span></a>.)<span class="intersentencespace"></span> The full data model represented by this migration is shown in <a href="https://www.railstutorial.org/book/modeling_users#fig-user_model_initial" class="hyperref">Figure&nbsp;<span class="ref">6.2</span></a>.</p>
<div class="center figure" id="_fig-user_model_initial" data-tralics-id="uid431" data-number="6.2"><span class="graphics"><img src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/user_model_initial.png" alt="user_model_initial"></span>
<div class="caption"><span class="header">Figure 6.2: </span><span class="description">The users data model produced by <a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a>.
</span></div></div>
<p>We can run the migration, known as “migrating up”, using the <code>rake</code> command (<a href="https://www.railstutorial.org/book/demo_app#sidebar-rake" class="hyperref">Box&nbsp;<span class="ref">2.1</span></a>) as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
</pre></div></div>
<p>(You may recall that we ran this command in a similar context in <a href="https://www.railstutorial.org/book/demo_app#sec-demo_users_resource" class="hyperref">Section&nbsp;<span class="ref">2.2</span></a>.)<span class="intersentencespace"></span> The first time <code>db:migrate</code> is run, it creates a file called <code>db/development.sqlite3</code>, which is an <a href="http://sqlite.org/" target="_blank">SQLite</a><sup id="_cha-6_footnote-ref-5" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-5">5</a></sup> database.<span class="intersentencespace"></span> We can see the structure of the database using the excellent <a href="http://sqlitebrowser.org/" target="_blank">SQLite Database Browser</a> to open the <code>db/development.sqlite3</code> file (<a href="https://www.railstutorial.org/book/modeling_users#fig-sqlite_database_browser" class="hyperref">Figure&nbsp;<span class="ref">6.3</span></a>); compare with the diagram in <a href="https://www.railstutorial.org/book/modeling_users#fig-user_model_initial" class="hyperref">Figure&nbsp;<span class="ref">6.2</span></a>.<span class="intersentencespace"></span> You might note that there’s one column in <a href="https://www.railstutorial.org/book/modeling_users#fig-sqlite_database_browser" class="hyperref">Figure&nbsp;<span class="ref">6.3</span></a> not accounted for in the migration: the <code>id</code> column.<span class="intersentencespace"></span> As noted briefly in <a href="https://www.railstutorial.org/book/demo_app#sec-demo_users_resource" class="hyperref">Section&nbsp;<span class="ref">2.2</span></a>, this column is created automatically, and is used by Rails to identify each row uniquely.</p>
<div class="center figure" id="_fig-sqlite_database_browser" data-tralics-id="uid433" data-number="6.3">
<div class="graphics image box"><img src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/sqlite_database_browser.png" alt="images/figures/sqlite_database_browser"></div><div class="caption"><span class="header">Figure 6.3: </span><span class="description">The <a href="http://sqlitebrowser.sourceforge.net/" target="_blank">SQLite Database Browser</a> with our new <code>users</code> table.
</span></div></div>
<p>Most migrations, including all the ones in the <em>Rails Tutorial</em>, are <em>reversible</em>, which means we can “migrate down” and undo them with a single Rake task, called <code>db:rollback</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:rollback
</pre></div></div>
<p>(See <a href="https://www.railstutorial.org/book/static_pages#sidebar-undoing_things" class="hyperref">Box&nbsp;<span class="ref">3.2</span></a> for another technique useful for reversing migrations.)<span class="intersentencespace"></span> Under the hood, this command executes the <code>drop_table</code> command to remove the users table from the database.<span class="intersentencespace"></span> The reason this works is that the <code>change</code> method knows that <code>drop_table</code> is the inverse of <code>create_table</code>, which means that the rollback migration can be easily inferred.<span class="intersentencespace"></span> In the case of an irreversible migration, such as one to remove a database column, it is necessary to define separate <code>up</code> and <code>down</code> methods in place of the single <code>change</code> method.<span class="intersentencespace"></span> Read about <a href="http://guides.rubyonrails.org/migrations.html" target="_blank">migrations in the Rails Guides</a> for more information.</p>
<p>If you rolled back the database, migrate up again before proceeding:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
</pre></div></div>
</div>
<div id="_sec-the_model_file" data-tralics-id="uid434" class="subsection" data-number="6.1.2"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-the_model_file" class="heading hyperref"><span class="number">6.1.2 </span>The model file</a></h3>
<p>We’ve seen how the User model generation in <a href="https://www.railstutorial.org/book/modeling_users#code-generate_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.1</span></a> generated a migration file (<a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a>), and we saw in <a href="https://www.railstutorial.org/book/modeling_users#fig-sqlite_database_browser" class="hyperref">Figure&nbsp;<span class="ref">6.3</span></a> the results of running this migration: it updated a file called <code>development.sqlite3</code> by creating a table <code>users</code> with columns <code>id</code>, <code>name</code>, <code>email</code>, <code>created_at</code>, and <code>updated_at</code>.<span class="intersentencespace"></span> <a href="https://www.railstutorial.org/book/modeling_users#code-generate_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.1</span></a> also created the model itself; the rest of this section is dedicated to understanding it.</p>
<p>We begin by looking at the code for the User model, which lives in the file <code>user.rb</code> inside the <code>app/models/</code> directory.<span class="intersentencespace"></span> It is, to put it mildly, very compact (<a href="https://www.railstutorial.org/book/modeling_users#code-raw_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.3</span></a>).</p>
<div class="codelisting" id="_code-raw_user_model" data-tralics-id="uid435" data-number="6.3"><div class="heading"><span class="number">Listing 6.3:</span> 

<span class="description">The brand new User model.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div></div></div><p>Recall from <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_class_of_our_own" class="hyperref">Section&nbsp;<span class="ref">4.4.2</span></a> that the syntax <code>class User &lt; ActiveRecord::Base</code> means that the <code>User</code> class <em>inherits</em> from <code>ActiveRecord::Base</code>, so that the User model automatically has all the functionality of the <code>ActiveRecord::Base</code> class.<span class="intersentencespace"></span> Of course, knowledge of this inheritance doesn’t do any good unless we know what <code>ActiveRecord::Base</code> contains, so let’s get started with some concrete examples.</p>
</div>
<div id="_sec-creating_user_objects" data-tralics-id="uid436" class="subsection" data-number="6.1.3"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-creating_user_objects" class="heading hyperref"><span class="number">6.1.3 </span>Creating user objects</a></h3>
<p>As in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#cha-rails_flavored_ruby" class="hyperref">Chapter&nbsp;<span class="ref">4</span></a>, our tool of choice for exploring data models is the Rails console.<span class="intersentencespace"></span> Since we don’t (yet) want to make any changes to our database, we’ll start the console in a <em>sandbox</em>:</p>
<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="go">Loading development environment in sandbox</span>
<span class="go">Any modifications you make will be rolled back on exit</span>
<span class="go">&gt;&gt;</span>
</pre></div></div>
<p>As indicated by the helpful message “Any modifications you make will be rolled back on exit”, when started in a sandbox the console will “roll back” (i.e., undo) any database changes introduced during the session.</p>
<p>In the console session in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_user_class" class="hyperref">Section&nbsp;<span class="ref">4.4.5</span></a>, we created a new user object with <code>User.new</code>, which we had access to only after requiring the example user file in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#code-example_user" class="hyperref">Listing&nbsp;<span class="ref">4.9</span></a>.<span class="intersentencespace"></span> With models, the situation is different; as you may recall from <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_controller_class" class="hyperref">Section&nbsp;<span class="ref">4.4.4</span></a>, the Rails console automatically loads the Rails environment, which includes the models.<span class="intersentencespace"></span> This means that we can make a new user object without any further work:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">new</span>
<span class="go">=&gt; #&lt;User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil&gt;</span>
</pre></div></div>
<p>We see here the default console representation of a user object.</p>
<p>When called with no arguments, <code>User.new</code> returns an object with all <code>nil</code> attributes.<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_user_class" class="hyperref">Section&nbsp;<span class="ref">4.4.5</span></a>, we designed the example User class to take an <em>initialization hash</em> to set the object attributes; that design choice was motivated by Active Record, which allows objects to be initialized in the same way:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Michael Hartl"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"mhartl@example.com"</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: nil, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: nil, updated_at: nil&gt;</span>
</pre></div></div>
<p>Here we see that the name and email attributes have been set as expected.</p>
<p>If you’ve been tailing the development log, you may have noticed that no new lines have shown up yet.<span class="intersentencespace"></span> This is because calling <code>User.new</code> doesn’t touch the database; it simply creates a new Ruby object in memory.<span class="intersentencespace"></span> To save the user object to the database, we call the <code>save</code> method on the <code>user</code> variable:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; true</span>
</pre></div></div>
<p>The <code>save</code> method returns <code>true</code> if it succeeds and <code>false</code> otherwise.<span class="intersentencespace"></span> (Currently, all saves should succeed; we’ll see cases in <a href="https://www.railstutorial.org/book/modeling_users#sec-user_validations" class="hyperref">Section&nbsp;<span class="ref">6.2</span></a> when some will fail.)<span class="intersentencespace"></span> As soon as you save, you should see a line in the console with the SQL command to <code>INSERT INTO "users"</code>.<span class="intersentencespace"></span> Because of the many methods supplied by Active Record, we won’t ever need raw SQL in this book, and I’ll omit discussion of the SQL commands from now on.<span class="intersentencespace"></span> But you can learn a lot by reading the SQL corresponding to Active Record commands.</p>
<p>You may have noticed that the new user object had <code>nil</code> values for the <code>id</code> and the magic columns <code>created_at</code> and <code>updated_at</code> attributes.<span class="intersentencespace"></span> Let’s see if our <code>save</code> changed anything:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;</span>
</pre></div></div>
<p>We see that the <code>id</code> has been assigned a value of&nbsp;<code>1</code>, while the magic columns have been assigned the current time and date.<sup id="_cha-6_footnote-ref-6" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-6">6</a></sup><span class="intersentencespace"></span> Currently, the created and updated timestamps are identical; we’ll see them differ in <a href="https://www.railstutorial.org/book/modeling_users#sec-updating_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.5</span></a>.</p>
<p>As with the User class in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_user_class" class="hyperref">Section&nbsp;<span class="ref">4.4.5</span></a>, instances of the User model allow access to their attributes using a dot notation:<sup id="_cha-6_footnote-ref-7" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-7">7</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">name</span>
<span class="go">=&gt; "Michael Hartl"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; "mhartl@example.com"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">updated_at</span>
<span class="go">=&gt; Mon, 11 Mar 2013 00:57:46 UTC +00:00</span>
</pre></div></div>
<p>As we’ll see in <a href="https://www.railstutorial.org/book/sign_up#cha-sign_up" class="hyperref">Chapter&nbsp;<span class="ref">7</span></a>, it’s often convenient to make and save a model in two steps as we have above, but Active Record also lets you combine them into one step with <code>User.create</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"A Nother"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"another@example.org"</span><span class="p">)</span>
<span class="go">#&lt;User id: 2, name: "A Nother", email: "another@example.org", created_at:</span>
<span class="go">"2013-03-11 01:05:24", updated_at: "2013-03-11 01:05:24"&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">foo</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Foo"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"foo@bar.com"</span><span class="p">)</span>
<span class="go">#&lt;User id: 3, name: "Foo", email: "foo@bar.com", created_at: "2013-03-11</span>
<span class="go">01:05:42", updated_at: "2013-03-11 01:05:42"&gt;</span>
</pre></div></div>
<p>Note that <code>User.create</code>, rather than returning <code>true</code> or <code>false</code>, returns the User object itself, which we can optionally assign to a variable (such as <code>foo</code> in the second command above).</p>
<p>The inverse of <code>create</code> is <code>destroy</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">foo</span><span class="o">.</span><span class="n">destroy</span>
<span class="go">=&gt; #&lt;User id: 3, name: "Foo", email: "foo@bar.com", created_at: "2013-03-11</span>
<span class="go">01:05:42", updated_at: "2013-03-11 01:05:42"&gt;</span>
</pre></div></div>
<p>Oddly, <code>destroy</code>, like <code>create</code>, returns the object in question, though I can’t recall ever having used the return value of <code>destroy</code>.<span class="intersentencespace"></span> Even odder, perhaps, is that the <code>destroy</code>ed object still exists in memory:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">foo</span>
<span class="go">=&gt; #&lt;User id: 3, name: "Foo", email: "foo@bar.com", created_at: "2013-03-11</span>
<span class="go">01:05:42", updated_at: "2013-03-11 01:05:42"&gt;</span>
</pre></div></div>
<p>How do we know if we really destroyed an object?<span class="intersentencespace"></span> And for saved and non-destroyed objects, how can we retrieve users from the database?<span class="intersentencespace"></span> It’s time to learn how to use Active Record to find user objects.</p>
</div>
<div id="_sec-finding_user_objects" data-tralics-id="uid439" class="subsection" data-number="6.1.4"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-finding_user_objects" class="heading hyperref"><span class="number">6.1.4 </span>Finding user objects</a></h3>
<p>Active Record provides several options for finding objects.<span class="intersentencespace"></span> Let’s use them to find the first user we created while verifying that the third user (<code>foo</code>) has been destroyed.<span class="intersentencespace"></span> We’ll start with the existing user:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;</span>
</pre></div></div>
<p>Here we’ve passed the id of the user to <code>User.find</code>; Active Record returns the user with that&nbsp;id.</p>
<p>Let’s see if the user with an <code>id</code> of&nbsp;<code>3</code> still exists in the database:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="go">ActiveRecord::RecordNotFound: Couldn't find User with ID=3</span>
</pre></div></div>
<p>Since we destroyed our third user in <a href="https://www.railstutorial.org/book/modeling_users#sec-creating_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.3</span></a>, Active Record can’t find it in the database.<span class="intersentencespace"></span> Instead, <code>find</code> raises an <em>exception</em>, which is a way of indicating an exceptional event in the execution of a program—in this case, a nonexistent Active Record id, which causes <code>find</code> to raise an <code>ActiveRecord::RecordNotFound</code> exception.<sup id="_cha-6_footnote-ref-8" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-8">8</a></sup></p>
<p>In addition to the generic <code>find</code>, Active Record also allows us to find users by specific attributes:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="s2">"mhartl@example.com"</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;</span>
</pre></div></div>
<p>The <code>find_by_email</code> method is automatically created by Active Record based on the <code>email</code> attribute in the <code>users</code> table.<span class="intersentencespace"></span> (As you might guess, Active Record creates a <code>find_by_name</code> method as well.)<span class="intersentencespace"></span> Starting in Rails&nbsp;4.0, the preferred method to find by attribute is to use the <code>find_by</code> method instead, passing the attribute as a hash:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="s2">"mhartl@example.com"</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;</span>
</pre></div></div>
<p>Since we will be using email addresses as usernames, this sort of <code>find</code> will be useful when we learn how to let users sign in to our site (<a href="https://www.railstutorial.org/book/sign_up#cha-sign_up" class="hyperref">Chapter&nbsp;<span class="ref">7</span></a>).<span class="intersentencespace"></span> If you’re worried that <code>find_by</code> will be inefficient if there are a large number of users, you’re ahead of the game; we’ll cover this issue, and its solution via database indices, in <a href="https://www.railstutorial.org/book/modeling_users#sec-uniqueness_validation" class="hyperref">Section&nbsp;<span class="ref">6.2.5</span></a>.</p>
<p>We’ll end with a couple of more general ways of finding users.<span class="intersentencespace"></span> First, there’s <code>first</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">first</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;</span>
</pre></div></div>
<p>Naturally, <code>first</code> just returns the first user in the database.<span class="intersentencespace"></span> There’s also <code>all</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">all</span>
<span class="go">=&gt; [#&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;,</span>
<span class="go">#&lt;User id: 2, name: "A Nother", email: "another@example.org", created_at:</span>
<span class="go">"2013-03-11 01:05:24", updated_at: "2013-03-11 01:05:24"&gt;]</span>
</pre></div></div>
<p>No prizes for inferring that <code>all</code> returns an array (<a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-arrays_and_ranges" class="hyperref">Section&nbsp;<span class="ref">4.3.1</span></a>) of all users in the database.</p>
</div>
<div id="_sec-updating_user_objects" data-tralics-id="uid441" class="subsection" data-number="6.1.5"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-updating_user_objects" class="heading hyperref"><span class="number">6.1.5 </span>Updating user objects</a></h3>
<p>Once we’ve created objects, we often want to update them.<span class="intersentencespace"></span> There are two basic ways to do this.<span class="intersentencespace"></span> First, we can assign attributes individually, as we did in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-a_user_class" class="hyperref">Section&nbsp;<span class="ref">4.4.5</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span>           <span class="c1"># Just a reminder about our user's attributes</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 00:57:46", updated_at: "2013-03-11 00:57:46"&gt;</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s2">"mhartl@example.net"</span>
<span class="go">=&gt; "mhartl@example.net"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; true</span>
</pre></div></div>
<p>Note that the final step is necessary to write the changes to the database.<span class="intersentencespace"></span> We can see what happens without a save by using <code>reload</code>, which reloads the object based on the database information:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; "mhartl@example.net"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s2">"foo@bar.com"</span>
<span class="go">=&gt; "foo@bar.com"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">reload</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; "mhartl@example.net"</span>
</pre></div></div>
<p>Now that we’ve updated the user by running <code>user.save</code>, the magic columns differ, as promised in <a href="https://www.railstutorial.org/book/modeling_users#sec-creating_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.3</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">created_at</span>
<span class="go">=&gt; "2013-03-11 00:57:46"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">updated_at</span>
<span class="go">=&gt; "2013-03-11 01:37:32"</span>
</pre></div></div>
<p>The second main way to update attributes is to use <code>update_attributes</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"The Dude"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"dude@abides.org"</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">name</span>
<span class="go">=&gt; "The Dude"</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span>
<span class="go">=&gt; "dude@abides.org"</span>
</pre></div></div>
<p>The <code>update_attributes</code> method accepts a hash of attributes, and on success performs both the update and the save in one step (returning <code>true</code> to indicate that the save went through).<span class="intersentencespace"></span> Note that if any of the validations fail, such as when a password is required to save a record (as implemented in <a href="https://www.railstutorial.org/book/modeling_users#sec-adding_a_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3</span></a>), the call to <code>update_attributes</code> will fail.<span class="intersentencespace"></span> If we only need to update a single attribute, using the singular <code>update_attribute</code> bypasses this restriction:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="s2">"The Dude"</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">name</span>
<span class="go">=&gt; "The Dude"</span>
</pre></div></div>
</div></div><div id="_sec-user_validations" data-tralics-id="cid35" class="section" data-number="6.2"><h2><a href="https://www.railstutorial.org/book/modeling_users#sec-user_validations" class="heading hyperref"><span class="number">6.2 </span>User validations</a></h2>
<p>The User model we created in <a href="https://www.railstutorial.org/book/modeling_users#sec-user_model" class="hyperref">Section&nbsp;<span class="ref">6.1</span></a> now has working <code>name</code> and <code>email</code> attributes, but they are completely generic: any string (including an empty one) is currently valid in either case.<span class="intersentencespace"></span> And yet, names and email addresses are more specific than this.<span class="intersentencespace"></span> For example, <code>name</code> should be non-blank, and <code>email</code> should match the specific format characteristic of email addresses.<span class="intersentencespace"></span> Moreover, since we’ll be using email addresses as unique usernames when users sign in, we shouldn’t allow email duplicates in the database.</p>
<p>In short, we shouldn’t allow <code>name</code> and <code>email</code> to be just any strings; we should enforce certain constraints on their values.<span class="intersentencespace"></span> Active Record allows us to impose such constraints using <em>validations</em>.<span class="intersentencespace"></span> In this section, we’ll cover several of the most common cases, validating <em>presence</em>, <em>length</em>, <em>format</em> and <em>uniqueness</em>.<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/modeling_users#sec-has_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3.4</span></a> we’ll add a final common validation, <em>confirmation</em>.<span class="intersentencespace"></span> And we’ll see in <a href="https://www.railstutorial.org/book/sign_up#sec-signup_failure" class="hyperref">Section&nbsp;<span class="ref">7.3</span></a> how validations give us convenient error messages when users make submissions that violate them.</p>
<div id="_sec-initial_user_tests" data-tralics-id="uid442" class="subsection" data-number="6.2.1"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-initial_user_tests" class="heading hyperref"><span class="number">6.2.1 </span>Initial user tests</a></h3>
<p>As with the other features of our sample app, we’ll add User model validations using test-driven development.<span class="intersentencespace"></span> Because we didn’t pass the</p>
<pre>--no-test-framework</pre>
<p>flag when we generated the User model (unlike, e.g., <a href="https://www.railstutorial.org/book/filling_in_the_layout#code-generate_users_controller" class="hyperref">Listing&nbsp;<span class="ref">5.31</span></a>), the command in <a href="https://www.railstutorial.org/book/modeling_users#code-generate_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.1</span></a> produces an initial spec for testing users, but in this case it’s practically blank (<a href="https://www.railstutorial.org/book/modeling_users#code-default_user_spec" class="hyperref">Listing&nbsp;<span class="ref">6.4</span></a>).</p>
<div class="codelisting" id="_code-default_user_spec" data-tralics-id="uid443" data-number="6.4"><div class="heading"><span class="number">Listing 6.4:</span> 

<span class="description">The practically blank default User spec.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="n">pending</span> <span class="s2">"add some examples to (or delete) </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</pre></div></div></div><p>This simply uses the <code>pending</code> method to indicate that we should fill the spec with something useful.<span class="intersentencespace"></span> We can see its effect by preparing a (blank) test database and running the User model spec:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake <span class="nb">test</span>:prepare
<span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb
<span class="go">*</span>


<span class="go">Finished in 0.01999 seconds</span>
<span class="go">1 example, 0 failures, 1 pending</span>

<span class="go">Pending:</span>
<span class="go">  User add some examples to (or delete)</span>
<span class="go">  /Users/mhartl/rails_projects/sample_app/spec/models/user_spec.rb</span>
<span class="go">  (Not Yet Implemented)</span>
</pre></div></div>
<p>On many systems, pending specs will be displayed in yellow to indicate that they are in between passing (green) and failing (red).</p>
<p>This is the first time we’ve seen the command to create a test database with the correct structure:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake <span class="nb">test</span>:prepare
</pre></div></div>
<p>This just ensures that the data model from the development database, <code>db/development.sqlite3</code>, is reflected in the test database, <code>db/test.sqlite3</code>.<sup id="_cha-6_footnote-ref-9" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-9">9</a></sup><span class="intersentencespace"></span> (Failure to run this Rake task after a migration is a common source of confusion.<span class="intersentencespace"></span> In addition, sometimes the test database gets corrupted and needs to be reset.<span class="intersentencespace"></span> If your test suite is mysteriously breaking, be sure to try running <code>rake test:prepare</code> to see if that fixes the problem.)<span class="intersentencespace"></span> Note that by default the test database gets <a href="http://en.wikipedia.org/wiki/Rollback_(data_management)" target="_blank">rolled back</a> at the end of each test, so each run of the tests starts with a fresh database.</p>
<p>We’ll follow the advice of the default spec by filling it in with some RSpec examples, shown in <a href="https://www.railstutorial.org/book/modeling_users#code-user_spec" class="hyperref">Listing&nbsp;<span class="ref">6.5</span></a>.</p>
<div class="codelisting" id="_code-user_spec" data-tralics-id="uid445" data-number="6.5"><div class="heading"><span class="number">Listing 6.5:</span> 

<span class="description">Testing for the <code>:name</code> and <code>:email</code> attributes.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div></div><p>The <code>before</code> block, which we saw in <a href="https://www.railstutorial.org/book/filling_in_the_layout#code-pretty_page_tests" class="hyperref">Listing&nbsp;<span class="ref">5.30</span></a>, runs the code inside the block before each example—in this case, creating a new <code>@user</code> instance variable using <code>User.new</code> and a valid initialization hash.<span class="intersentencespace"></span> Then</p>
<div class="code"><div class="highlight"><pre><span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>
</pre></div></div>
<p>makes <code>@user</code> the default subject of the test example, as seen before in the context of the <code>page</code> variable in <a href="https://www.railstutorial.org/book/filling_in_the_layout#sec-pretty_rspec" class="hyperref">Section&nbsp;<span class="ref">5.3.4</span></a>.</p>
<p>The two examples in <a href="https://www.railstutorial.org/book/modeling_users#code-user_spec" class="hyperref">Listing&nbsp;<span class="ref">6.5</span></a> test for the existence of <code>name</code> and <code>email</code> attributes:</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
<span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
</pre></div></div>
<p>By themselves, these tests aren’t particularly useful, as a User object that lacks (say) a <code>name</code> attribute will throw an exception in the <code>before</code> block.<span class="intersentencespace"></span> But these tests do ensure that the constructions <code>user.name</code> and <code>user.email</code> are valid, whereas the <code>before</code> block only tests the attributes when passed as a hash to <code>new</code>.<span class="intersentencespace"></span> In addition, testing for model attributes is a useful convention, as it allows us to see at a glance the methods the model should respond to.</p>
<p>The <code>respond_to</code> methods implicitly use the Ruby method <code>respond_to?</code>, which accepts a symbol and returns <code>true</code> if the object responds to the given method or attribute and <code>false</code> otherwise:</p>
<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
<span class="go">=&gt; true</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:foobar</span><span class="p">)</span>
<span class="go">=&gt; false</span>
</pre></div></div>
<p>(Recall from <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-objects_and_message_passing" class="hyperref">Section&nbsp;<span class="ref">4.2.3</span></a> that Ruby uses a question mark to indicate such true/false boolean methods.)<span class="intersentencespace"></span> The tests themselves rely on the <em>boolean convention</em> used by RSpec: the code</p>
<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</pre></div></div>
<p>can be tested using the RSpec code</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">"should respond to 'name'"</span> <span class="k">do</span>
  <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
<span class="k">end</span>
</pre></div></div>
<p>Because of <code>subject { @user }</code>, we can alternatively write this using the single-line style introduced in <a href="https://www.railstutorial.org/book/filling_in_the_layout#sec-pretty_rspec" class="hyperref">Section&nbsp;<span class="ref">5.3.4</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
</pre></div></div>
<p>These kinds of tests allow us to use TDD to add new attributes and methods to our User model, and as a side-effect we get a nice specification for the methods that all <code>User</code> objects should respond to.</p>
<p>Because we have already properly prepared the test database with <code>rake test:prepare</code>, the tests should pass:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div></div>
</div>
<div id="_sec-presence_validation" data-tralics-id="uid446" class="subsection" data-number="6.2.2"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-presence_validation" class="heading hyperref"><span class="number">6.2.2 </span>Validating presence</a></h3>
<p>Perhaps the most elementary validation is <em>presence</em>, which simply verifies that a given attribute is present.<span class="intersentencespace"></span> For example, in this section we’ll ensure that both the name and email fields are present before a user gets saved to the database.<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/sign_up#sec-signup_error_messages" class="hyperref">Section&nbsp;<span class="ref">7.3.3</span></a>, we’ll see how to propagate this requirement up to the signup form for creating new users.</p>
<p>We’ll start with a test for the presence of a <code>name</code> attribute.<span class="intersentencespace"></span> Although the first step in TDD is to write a <em>failing</em> test (<a href="https://www.railstutorial.org/book/static_pages#sec-TDD" class="hyperref">Section&nbsp;<span class="ref">3.2.1</span></a>), in this case we don’t yet know enough about validations to write the proper test, so we’ll write the validation first, using the console to understand it.<span class="intersentencespace"></span> Then we’ll comment out the validation, write a failing test, and verify that uncommenting the validation gets the test to pass.<span class="intersentencespace"></span> This procedure may seem pedantic for such a simple test, but I have seen many “simple” tests that actually test the wrong thing; being meticulous about TDD is simply the <em>only</em> way to be confident that we’re testing the right thing.<span class="intersentencespace"></span> (This comment-out technique is also useful when rescuing an application whose application code is already written but—<a href="http://en.wiktionary.org/wiki/quelle_horreur" target="_blank"><em>quelle horreur!</em></a>—has no tests.)</p>
<p>The way to validate the presence of the name attribute is to use the <code>validates</code> method with argument <code>presence: true</code>, as shown in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_presence_of_name" class="hyperref">Listing&nbsp;<span class="ref">6.6</span></a>.<span class="intersentencespace"></span> The <code>presence: true</code> argument is a one-element <em>options hash</em>; recall from <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-css_revisited" class="hyperref">Section&nbsp;<span class="ref">4.3.4</span></a> that curly braces are optional when passing hashes as the final argument in a method.<span class="intersentencespace"></span> (As noted in <a href="https://www.railstutorial.org/book/filling_in_the_layout#sec-adding_to_the_layout" class="hyperref">Section&nbsp;<span class="ref">5.1.1</span></a>, the use of options hashes is a recurring theme in Rails.)</p>
<div class="codelisting" id="_code-validates_presence_of_name" data-tralics-id="uid447" data-number="6.6"><div class="heading"><span class="number">Listing 6.6:</span> 

<span class="description">Validating the presence of a <code>name</code> attribute.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div></div></div><p><a href="https://www.railstutorial.org/book/modeling_users#code-validates_presence_of_name" class="hyperref">Listing&nbsp;<span class="ref">6.6</span></a> may look like magic, but <code>validates</code> is just a method.<span class="intersentencespace"></span> An equivalent formulation of <a href="https://www.railstutorial.org/book/modeling_users#code-validates_presence_of_name" class="hyperref">Listing&nbsp;<span class="ref">6.6</span></a> using parentheses is as follows:</p>
<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
<span class="k">end</span>
</pre></div></div>
<p>Let’s drop into the console to see the effects of adding a validation to our User model:<sup id="_cha-6_footnote-ref-10" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-10">10</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"mhartl@example.com"</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">save</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">valid?</span>
<span class="go">=&gt; false</span>
</pre></div></div>
<p>Here <code>user.save</code> returns <code>false</code>, indicating a failed save.<span class="intersentencespace"></span> In the final command, we use the <code>valid?</code> method, which returns <code>false</code> when the object fails one or more validations, and <code>true</code> when all validations pass.<span class="intersentencespace"></span> In this case, we only have one validation, so we know which one failed, but it can still be helpful to check using the <code>errors</code> object generated on failure:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span>
<span class="go">=&gt; ["Name can't be blank"]</span>
</pre></div></div>
<p>(The error message is a hint that Rails validates the presence of an attribute using the <code>blank?</code> method, which we saw at the end of <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-modifying_built_in_classes" class="hyperref">Section&nbsp;<span class="ref">4.4.3</span></a>.)</p>
<p>Now for the failing test.<span class="intersentencespace"></span> To ensure that our incipient test will fail, let’s comment out the validation at this point (<a href="https://www.railstutorial.org/book/modeling_users#code-commented_out_validation" class="hyperref">Listing&nbsp;<span class="ref">6.7</span></a>).</p>
<div class="codelisting" id="_code-commented_out_validation" data-tralics-id="uid449" data-number="6.7"><div class="heading"><span class="number">Listing 6.7:</span> 

<span class="description">Commenting out a validation to ensure a failing test.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="c1"># validates :name, presence: true</span>
<span class="k">end</span>
</pre></div></div></div><p>The initial validation tests then appear as in <a href="https://www.railstutorial.org/book/modeling_users#code-failing_validates_name_spec" class="hyperref">Listing&nbsp;<span class="ref">6.8</span></a>.</p>
<div class="codelisting" id="_code-failing_validates_name_spec" data-tralics-id="uid450" data-number="6.8"><div class="heading"><span class="number">Listing 6.8:</span> 

<span class="description">A failing test for validation of the <code>name</code> attribute.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s2">"when name is not present"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">" "</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>The first new example is just a sanity check, verifying that the subject (<code>@user</code>) is initially valid:</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
</pre></div></div>
<p>This is another example of the RSpec boolean convention we saw in <a href="https://www.railstutorial.org/book/modeling_users#sec-initial_user_tests" class="hyperref">Section&nbsp;<span class="ref">6.2.1</span></a>: whenever an object responds to a boolean method <code>foo?</code>, there is a corresponding test method called <code>be_foo</code>.<span class="intersentencespace"></span> In this case, we can test the result of calling</p>
<div class="code"><div class="highlight"><pre><span class="vi">@user</span><span class="o">.</span><span class="n">valid?</span>
</pre></div></div>
<p>with</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="s2">"should be valid"</span> <span class="k">do</span>
  <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_valid</span>
<span class="k">end</span>
</pre></div></div>
<p>As before, <code>subject { @user }</code> lets us use the one-line style, yielding</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
</pre></div></div>
<p>The second test first sets the user’s name to an invalid (blank) value, and then tests to see that the resulting <code>@user</code> object is invalid:</p>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">"when name is not present"</span> <span class="k">do</span>
  <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">" "</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div>
<p>This uses a <code>before</code> block to set the user’s name to an invalid (blank) value and then checks that the resulting user object is not valid.</p>
<p>You should verify that the tests fail at this point:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb
<span class="go">...F</span>
<span class="go">4 examples, 1 failure</span>
</pre></div></div>
<p>Now uncomment the validation (i.e., revert <a href="https://www.railstutorial.org/book/modeling_users#code-commented_out_validation" class="hyperref">Listing&nbsp;<span class="ref">6.7</span></a> back to <a href="https://www.railstutorial.org/book/modeling_users#code-validates_presence_of_name" class="hyperref">Listing&nbsp;<span class="ref">6.6</span></a>) to get the tests to pass:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/models/user_spec.rb
<span class="go">....</span>
<span class="go">4 examples, 0 failures</span>
</pre></div></div>
<p>Of course, we also want to validate the presence of email addresses.<span class="intersentencespace"></span> The test (<a href="https://www.railstutorial.org/book/modeling_users#code-validates_email_spec" class="hyperref">Listing&nbsp;<span class="ref">6.9</span></a>) is analogous to the one for the <code>name</code> attribute.</p>
<div class="codelisting" id="_code-validates_email_spec" data-tralics-id="uid451" data-number="6.9"><div class="heading"><span class="number">Listing 6.9:</span> 

<span class="description">A test for presence of the <code>email</code> attribute.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"when email is not present"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s2">" "</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>The implementation is also virtually the same, as seen in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_presence_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.10</span></a>.</p>
<div class="codelisting" id="_code-validates_presence_of_email" data-tralics-id="uid452" data-number="6.10"><div class="heading"><span class="number">Listing 6.10:</span> 

<span class="description">Validating the presence of the <code>name</code> and <code>email</code> attributes.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div></div></div><p>Now all the tests should pass, and the presence validations are complete.</p>
</div>
<div id="_sec-length_validation" data-tralics-id="uid453" class="subsection" data-number="6.2.3"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-length_validation" class="heading hyperref"><span class="number">6.2.3 </span>Length validation</a></h3>
<p>We’ve constrained our User model to require a name for each user, but we should go further: the user’s names will be displayed on the sample site, so we should enforce some limit on their length.<span class="intersentencespace"></span> With all the work we did in <a href="https://www.railstutorial.org/book/modeling_users#sec-presence_validation" class="hyperref">Section&nbsp;<span class="ref">6.2.2</span></a>, this step is easy.</p>
<p>We start with a test.<span class="intersentencespace"></span> There’s no science to picking a maximum length; we’ll just pull&nbsp;<code>50</code> out of thin air as a reasonable upper bound, which means verifying that names of&nbsp;<code>51</code> characters are too long (<a href="https://www.railstutorial.org/book/modeling_users#code-length_validation_test" class="hyperref">Listing&nbsp;<span class="ref">6.11</span></a>).</p>
<div class="codelisting" id="_code-length_validation_test" data-tralics-id="uid454" data-number="6.11"><div class="heading"><span class="number">Listing 6.11:</span> 

<span class="description">A test for <code>name</code> length validation.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"when name is too long"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"a"</span> <span class="o">*</span> <span class="mi">51</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>For convenience, we’ve used “string multiplication” in <a href="https://www.railstutorial.org/book/modeling_users#code-length_validation_test" class="hyperref">Listing&nbsp;<span class="ref">6.11</span></a> to make a string 51 characters long.<span class="intersentencespace"></span> We can see how this works using the console:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="s2">"a"</span> <span class="o">*</span> <span class="mi">51</span>
<span class="go">=&gt; "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>
<span class="gp">&gt;&gt; </span><span class="p">(</span><span class="s2">"a"</span> <span class="o">*</span> <span class="mi">51</span><span class="p">)</span><span class="o">.</span><span class="n">length</span>
<span class="go">=&gt; 51</span>
</pre></div></div>
<p>The test in <a href="https://www.railstutorial.org/book/modeling_users#code-length_validation_test" class="hyperref">Listing&nbsp;<span class="ref">6.11</span></a> should fail.<span class="intersentencespace"></span> To get it to pass, we need to know about the validation argument to constrain length, <code>:length</code>, along with the <code>:maximum</code> parameter to enforce the upper bound (<a href="https://www.railstutorial.org/book/modeling_users#code-length_validation" class="hyperref">Listing&nbsp;<span class="ref">6.12</span></a>).</p>
<div class="codelisting" id="_code-length_validation" data-tralics-id="uid455" data-number="6.12"><div class="heading"><span class="number">Listing 6.12:</span> 

<span class="description">Adding a length validation for the <code>name</code> attribute.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">}</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div></div></div><p>Now the tests should pass.<span class="intersentencespace"></span> With our test suite passing again, we can move on to a more challenging validation: email format.</p>
</div>
<div id="_sec-format_validation" data-tralics-id="uid456" class="subsection" data-number="6.2.4"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-format_validation" class="heading hyperref"><span class="number">6.2.4 </span>Format validation</a></h3>
<p>Our validations for the <code>name</code> attribute enforce only minimal constraints—any non-blank name under 51 characters will do—but of course the <code>email</code> attribute must satisfy more stringent requirements.<span class="intersentencespace"></span> So far we’ve only rejected blank email addresses; in this section, we’ll require email addresses to conform to the familiar pattern <code>user@example.com</code>.</p>
<p>Neither the tests nor the validation will be exhaustive, just good enough to accept most valid email addresses and reject most invalid ones.<span class="intersentencespace"></span> We’ll start with a couple tests involving collections of valid and invalid addresses.<span class="intersentencespace"></span> To make these collections, it’s worth knowing about the useful <code>%w[]</code> technique for making arrays of strings, as seen in this console session:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="sx">%w[foo bar baz]</span>
<span class="go">=&gt; ["foo", "bar", "baz"]</span>
<span class="gp">&gt;&gt; </span><span class="n">addresses</span> <span class="o">=</span> <span class="sx">%w[user@foo.COM THE_US-ER@foo.bar.org first.last@foo.jp]</span>
<span class="go">=&gt; ["user@foo.COM", "THE_US-ER@foo.bar.org", "first.last@foo.jp"]</span>
<span class="gp">&gt;&gt; </span><span class="n">addresses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">address</span><span class="o">|</span>
<span class="gp">?&gt; </span>  <span class="nb">puts</span> <span class="n">address</span>
<span class="gp">&gt;&gt; </span><span class="k">end</span>
<span class="go">user@foo.COM</span>
<span class="go">THE_US-ER@foo.bar.org</span>
<span class="go">first.last@foo.jp</span>
</pre></div></div>
<p>Here we’ve iterated over the elements of the <code>addresses</code> array using the <code>each</code> method (<a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-blocks" class="hyperref">Section&nbsp;<span class="ref">4.3.2</span></a>).<span class="intersentencespace"></span> With this technique in hand, we’re ready to write some basic email format validation tests (<a href="https://www.railstutorial.org/book/modeling_users#code-email_format_validation_tests" class="hyperref">Listing&nbsp;<span class="ref">6.13</span></a>).</p>
<div class="codelisting" id="_code-email_format_validation_tests" data-tralics-id="uid457" data-number="6.13"><div class="heading"><span class="number">Listing 6.13:</span> 

<span class="description">Tests for email format validation.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"when email format is invalid"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"should be invalid"</span> <span class="k">do</span>
      <span class="n">addresses</span> <span class="o">=</span> <span class="sx">%w[user@foo,com user_at_foo.org example.user@foo.</span>
<span class="sx">                     foo@bar_baz.com foo@bar+baz.com]</span>
      <span class="n">addresses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">invalid_address</span><span class="o">|</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">invalid_address</span>
        <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_valid</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"when email format is valid"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"should be valid"</span> <span class="k">do</span>
      <span class="n">addresses</span> <span class="o">=</span> <span class="sx">%w[user@foo.COM A_US-ER@f.b.org frst.lst@foo.jp a+b@baz.cn]</span>
      <span class="n">addresses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">valid_address</span><span class="o">|</span>
        <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">valid_address</span>
        <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_valid</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>As noted above, these are far from exhaustive, but we do check the common valid email forms <code>user@foo.COM</code>, <code>THE_US-ER@foo.bar.org </code> (uppercase, underscores, and compound domains), and <code>first.last@foo.jp</code> (the standard corporate username <code>first.last</code>, with a two-letter top-level domain&nbsp;<code>jp</code> (Japan)), along with several invalid forms.</p>
<p>The application code for email format validation uses a <em>regular expression</em> (or <em>regex</em>) to define the format, along with the <code>:format</code> argument to the <code>validates</code> method (<a href="https://www.railstutorial.org/book/modeling_users#code-validates_format_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.14</span></a>).</p>
<div class="codelisting" id="_code-validates_format_of_email" data-tralics-id="uid458" data-number="6.14"><div class="heading"><span class="number">Listing 6.14:</span> 

<span class="description">Validating the email format with a regular expression.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span>  <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">}</span>
  <span class="no">VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="no">VALID_EMAIL_REGEX</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div></div><p>Here the regex <code>VALID_EMAIL_REGEX</code> is a <em>constant</em>, indicated in Ruby by a name starting with a capital letter.<span class="intersentencespace"></span> The code</p>
<div class="code"><div class="highlight"><pre>  <span class="no">VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="no">VALID_EMAIL_REGEX</span> <span class="p">}</span>
</pre></div></div>
<p>ensures that only email addresses that match the pattern will be considered valid.</p>
<p>So, where does the pattern come from?<span class="intersentencespace"></span> Regular expressions consist of a terse (some would say <a href="http://catb.org/jargon/html/L/line-noise.html" target="_blank">unreadable</a>) language for matching text patterns; learning to construct regexes is an art, and to get you started I’ve broken <code>VALID_EMAIL_REGEX</code> into bite-sized pieces (<a href="https://www.railstutorial.org/book/modeling_users#table-valid_email_regex" class="hyperref">Table&nbsp;<span class="ref">6.1</span></a>).<sup id="_cha-6_footnote-ref-11" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-11">11</a></sup><span class="intersentencespace"></span> To really learn about regular expressions, though, I consider the amazing <a href="http://www.rubular.com/" target="_blank">Rubular</a> regular expression editor (<a href="https://www.railstutorial.org/book/modeling_users#fig-rubular" class="hyperref">Figure&nbsp;<span class="ref">6.4</span></a>) to be simply essential.<sup id="_cha-6_footnote-ref-12" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-12">12</a></sup><span class="intersentencespace"></span> The Rubular website has a beautiful interactive interface for making regular expressions, along with a handy regex quick reference.<span class="intersentencespace"></span> I encourage you to study <a href="https://www.railstutorial.org/book/modeling_users#table-valid_email_regex" class="hyperref">Table&nbsp;<span class="ref">6.1</span></a> with a browser window open to Rubular—no amount of reading about regular expressions can replace a couple of hours playing with Rubular.<span class="intersentencespace"></span> (<em>Note</em>: If you use the regex from <a href="https://www.railstutorial.org/book/modeling_users#code-validates_format_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.14</span></a> in Rubular, you should leave off the <span class="inline_verbatim">\A</span> and <span class="inline_verbatim">\z</span> characters.)</p>
<div class="table" id="_table-valid_email_regex" data-tralics-id="uid461" data-number="6.1"><table class="tabular"><tbody><tr class="bottom_border"><td class="align_left"><strong>Expression</strong></td>
<td class="align_left"><strong>Meaning</strong></td>
</tr><tr><td class="align_left"><span class="inline_verbatim">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span></td>
<td class="align_left">full regex</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">/</span></td>
<td class="align_left">start of regex</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">\A</span></td>
<td class="align_left">match start of a string</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">[\w+\-.]+</span></td>
<td class="align_left">at least one word character, plus, hyphen, or dot</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">@</span></td>
<td class="align_left">literal “at sign”</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">[a-z\d\-.]+</span></td>
<td class="align_left">at least one letter, digit, hyphen, or dot</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">\.</span></td>
<td class="align_left">literal dot</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">[a-z]+</span></td>
<td class="align_left">at least one letter</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">\z</span></td>
<td class="align_left">match end of a string</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">/</span></td>
<td class="align_left">end of regex</td>
</tr><tr><td class="align_left"><span class="inline_verbatim">i</span></td>
<td class="align_left">case insensitive</td>
</tr></tbody></table><div class="caption"><span class="header">Table 6.1: </span><span class="description">Breaking down the email regex from <a href="https://www.railstutorial.org/book/modeling_users#code-validates_format_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.14</span></a>.
</span></div></div>
<p>By the way, there actually exists a full regex for matching email addresses according to the official standard, but it’s really not worth the trouble.<span class="intersentencespace"></span> The one in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_format_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.14</span></a> is fine, maybe even better than the official one.<sup id="_cha-6_footnote-ref-13" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-13">13</a></sup><span class="intersentencespace"></span> The expression above does have one weakness, though: it allows invalid addresses such as <code>foo@bar..com</code> that contain consecutive dots.<span class="intersentencespace"></span> Fixing this blemish is left as an exercise (<a href="https://www.railstutorial.org/book/modeling_users#sec-modeling_users_exercises" class="hyperref">Section&nbsp;<span class="ref">6.5</span></a>).</p>
<div class="center figure" id="_fig-rubular" data-tralics-id="uid463" data-number="6.4">
<div class="graphics image box"><img src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/rubular.png" alt="images/figures/rubular"></div><div class="caption"><span class="header">Figure 6.4: </span><span class="description">The awesome <a href="http://www.rubular.com/" target="_blank">Rubular</a> regular expression editor.
</span></div></div>
<p>The tests should all be passing now.<span class="intersentencespace"></span> (In fact, the tests for valid email addresses should have been passing all along; since regexes are notoriously error-prone, the valid email tests are there mainly as a sanity check on <code>VALID_EMAIL_REGEX</code>.)<span class="intersentencespace"></span> This means that there’s only one constraint left: enforcing the email addresses to be unique.</p>
</div>
<div id="_sec-uniqueness_validation" data-tralics-id="uid464" class="subsection" data-number="6.2.5"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-uniqueness_validation" class="heading hyperref"><span class="number">6.2.5 </span>Uniqueness validation</a></h3>
<p>To enforce uniqueness of email addresses (so that we can use them as usernames), we’ll be using the <code>:unique</code> option to the <code>validates</code> method.<span class="intersentencespace"></span> But be warned: there’s a <em>major</em> caveat, so don’t just skim this section—read it carefully.</p>
<p>We’ll start, as usual, with our tests.<span class="intersentencespace"></span> In our previous model tests, we’ve mainly used <code>User.new</code>, which just creates a Ruby object in memory, but for uniqueness tests we actually need to put a record into the database.<sup id="_cha-6_footnote-ref-14" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-14">14</a></sup><span class="intersentencespace"></span> The (first) duplicate email test appears in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_uniqueness_of_email_test" class="hyperref">Listing&nbsp;<span class="ref">6.15</span></a>.</p>
<div class="codelisting" id="_code-validates_uniqueness_of_email_test" data-tralics-id="uid466" data-number="6.15"><div class="heading"><span class="number">Listing 6.15:</span> 

<span class="description">A test for the rejection of duplicate email addresses.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"when email address is already taken"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="k">do</span>
      <span class="n">user_with_same_email</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">dup</span>
      <span class="n">user_with_same_email</span><span class="o">.</span><span class="n">save</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>The method here is to make a user with the same email address as <code>@user</code>, which we accomplish using <code>@user.dup</code>, which creates a duplicate user with the same attributes.<span class="intersentencespace"></span> Since we then save that user, the original <code>@user</code> has an email address that already exists in the database, and hence should not be valid.</p>
<p>We can get the new test in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_uniqueness_of_email_test" class="hyperref">Listing&nbsp;<span class="ref">6.15</span></a> to pass with the code in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_uniqueness_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.16</span></a>.</p>
<div class="codelisting" id="_code-validates_uniqueness_of_email" data-tralics-id="uid467" data-number="6.16"><div class="heading"><span class="number">Listing 6.16:</span> 

<span class="description">Validating the uniqueness of email addresses.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="no">VALID_EMAIL_REGEX</span> <span class="p">},</span>
                    <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div></div></div><p>We’re not quite done, though.<span class="intersentencespace"></span> Email addresses are typically processed as if they were case-insensitive—i.e., <code>foo@bar.com</code> is treated the same as <code>FOO@BAR.COM</code> or <code>FoO@BAr.coM</code>—so our validation should incorporate this as well.<sup id="_cha-6_footnote-ref-15" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-15">15</a></sup><span class="intersentencespace"></span> We test for case-insensitivity with the code in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_uniqueness_of_email_case_insensitive_test" class="hyperref">Listing&nbsp;<span class="ref">6.17</span></a>.</p>
<div class="codelisting" id="_code-validates_uniqueness_of_email_case_insensitive_test" data-tralics-id="uid469" data-number="6.17"><div class="heading"><span class="number">Listing 6.17:</span> 

<span class="description">A test for the rejection of duplicate email addresses, insensitive to case.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"when email address is already taken"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="k">do</span>
      <span class="n">user_with_same_email</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">dup</span>
      <span class="n">user_with_same_email</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">upcase</span>
      <span class="n">user_with_same_email</span><span class="o">.</span><span class="n">save</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>Here we are using the <code>upcase</code> method on strings (seen briefly in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-blocks" class="hyperref">Section&nbsp;<span class="ref">4.3.2</span></a>).<span class="intersentencespace"></span> This test does the same thing as the first duplicate email test, but with an upper-case email address instead.<span class="intersentencespace"></span> If this test feels a little abstract, go ahead and fire up the console:</p>
<div class="code"><div class="highlight"><pre><span class="go">$ rails console --sandbox</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">upcase</span>
<span class="go">=&gt; "USER@EXAMPLE.COM"</span>
<span class="gp">&gt;&gt; </span><span class="n">user_with_same_email</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">dup</span>
<span class="gp">&gt;&gt; </span><span class="n">user_with_same_email</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">upcase</span>
<span class="gp">&gt;&gt; </span><span class="n">user_with_same_email</span><span class="o">.</span><span class="n">valid?</span>
<span class="go">=&gt; true</span>
</pre></div></div>
<p>Of course, <code>user_with_same_email.valid?</code> is <code>true</code>, because the uniqueness validation is currently case-sensitive, but we want it to be <code>false</code>.<span class="intersentencespace"></span> Fortunately, <code>:uniqueness</code> accepts an option, <code>:case_sensitive</code>, for just this purpose (<a href="https://www.railstutorial.org/book/modeling_users#code-validates_uniqueness_of_email_case_insensitive" class="hyperref">Listing&nbsp;<span class="ref">6.18</span></a>).</p>
<div class="codelisting" id="_code-validates_uniqueness_of_email_case_insensitive" data-tralics-id="uid470" data-number="6.18"><div class="heading"><span class="number">Listing 6.18:</span> 

<span class="description">Validating the uniqueness of email addresses, ignoring case.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="no">VALID_EMAIL_REGEX</span> <span class="p">},</span>
                    <span class="ss">uniqueness</span><span class="p">:</span> <span class="p">{</span> <span class="ss">case_sensitive</span><span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div></div><p>Note that we have simply replaced <code>true</code> with <code>case_sensitive: false</code>; Rails infers in this case that <code>:uniqueness</code> should be <code>true</code>.<span class="intersentencespace"></span> At this point, our application—with an important caveat—enforces email uniqueness, and our test suite should pass.</p>
<div id="_sec-the_caveat" data-tralics-id="uid471" class="subsubsection" data-number="6.2.5.1"><h4><a href="https://www.railstutorial.org/book/modeling_users#sec-the_caveat" class="heading">The uniqueness caveat</a></h4>
<p>There’s just one small problem, the caveat alluded to above:</p>
<p><strong>Using <code>validates :uniqueness</code> does not guarantee uniqueness.</strong></p>
<p>D’oh!<span class="intersentencespace"></span> But what can go wrong?<span class="intersentencespace"></span> Here’s what:</p>
<ol><li>Alice signs up for the sample app, with address alice@wonderland.com.<span class="intersentencespace"></span>
</li>
<li>Alice accidentally clicks on “Submit” <em>twice</em>, sending two requests in quick succession.<span class="intersentencespace"></span>
</li>
<li>The following sequence occurs: request 1 creates a user in memory that passes validation, request 2 does the same, request&nbsp;1’s user gets saved, request&nbsp;2’s user gets saved.<span class="intersentencespace"></span>
</li>
<li>Result: two user records with the exact same email address, despite the uniqueness validation.<span class="intersentencespace"></span>
</li></ol><p>If the above sequence seems implausible, believe me, it isn’t: it can happen on any Rails website with significant traffic.<span class="intersentencespace"></span> Luckily, the solution is straightforward to implement; we just need to enforce uniqueness at the database level as well.<span class="intersentencespace"></span> Our method is to create a database <em>index</em> on the email column, and then require that the index be unique.</p>
<p>The email index represents an update to our data modeling requirements, which (as discussed in <a href="https://www.railstutorial.org/book/modeling_users#sec-database_migrations" class="hyperref">Section&nbsp;<span class="ref">6.1.1</span></a>) is handled in Rails using migrations.<span class="intersentencespace"></span> We saw in <a href="https://www.railstutorial.org/book/modeling_users#sec-database_migrations" class="hyperref">Section&nbsp;<span class="ref">6.1.1</span></a> that generating the User model automatically created a new migration (<a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a>); in the present case, we are adding structure to an existing model, so we need to create a migration directly using the <code>migration</code> generator:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate migration add_index_to_users_email
</pre></div></div>
<p>Unlike the migration for users, the email uniqueness migration is not pre-defined, so we need to fill in its contents with <a href="https://www.railstutorial.org/book/modeling_users#code-email_uniqueness_index" class="hyperref">Listing&nbsp;<span class="ref">6.19</span></a>.<sup id="_cha-6_footnote-ref-16" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-16">16</a></sup></p>
<div class="codelisting" id="_code-email_uniqueness_index" data-tralics-id="uid477" data-number="6.19"><div class="heading"><span class="number">Listing 6.19:</span> 

<span class="description">The migration for enforcing email uniqueness.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">db/migrate/[timestamp]_add_index_to_users_email.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AddIndexToUsersEmail</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">add_index</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>This uses a Rails method called <code>add_index</code> to add an index on the <code>email</code> column of the <code>users</code> table.<span class="intersentencespace"></span> The index by itself doesn’t enforce uniqueness, but the option <code>unique: true</code> does.</p>
<p>The final step is to migrate the database:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
</pre></div></div>
<p>(If this fails, try exiting any running sandbox console sessions, which can lock the database and prevent migrations.)<span class="intersentencespace"></span> If you’re interested in seeing the practical effect of this, take a look at the file <code>db/schema.rb</code>, which should now include a line like this:</p>
<div class="code"><div class="highlight"><pre><span class="n">add_index</span> <span class="s2">"users"</span><span class="p">,</span> <span class="o">[</span><span class="s2">"email"</span><span class="o">]</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">"index_users_on_email"</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</pre></div></div>
<p>Unfortunately, there’s one more change we need to make to be assured of email uniqueness, which is to make sure that the email address is all lower-case before it gets saved to the database.<span class="intersentencespace"></span> The reason is that not all database adapters use case-sensitive indices.<sup id="_cha-6_footnote-ref-17" class="footnote intersentence"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-17">17</a></sup><span class="intersentencespace"></span> The way to do this is with a <a href="http://en.wikipedia.org/wiki/Callback_(computer_science)" target="_blank"><em>callback</em></a>, which is a method that gets invoked at a particular point in the lifetime of an Active Record object (see the <a href="http://api.rubyonrails.org/v4.0.0/classes/ActiveRecord/Callbacks.html" target="_blank">Rails API entry on callbacks</a>).<span class="intersentencespace"></span> In the present case, we’ll use a <code>before_save</code> callback to force Rails to downcase the email attribute before saving the user to the database, as shown in <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase" class="hyperref">Listing&nbsp;<span class="ref">6.20</span></a>.</p>
<div class="codelisting" id="_code-email_downcase" data-tralics-id="uid479" data-number="6.20"><div class="heading"><span class="number">Listing 6.20:</span> 

<span class="description">Ensuring email uniqueness by downcasing the email attribute.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_save</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">.</span><span class="n">downcase</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>The code in <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase" class="hyperref">Listing&nbsp;<span class="ref">6.20</span></a> passes a block to the <code>before_save</code> callback and sets the user’s email address to a lower-case version of its current value using the <code>downcase</code> string method.<span class="intersentencespace"></span> This code is a little advanced, and at this point I suggest you simply trust that it works; if you’re skeptical, comment out the uniqueness validation from <a href="https://www.railstutorial.org/book/modeling_users#code-validates_uniqueness_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.16</span></a> and try to create users with identical email addresses to see the error that results.<span class="intersentencespace"></span> (We’ll see this technique again in <a href="https://www.railstutorial.org/book/sign_in_out#sec-remember_me" class="hyperref">Section&nbsp;<span class="ref">8.2.1</span></a>, where we’ll use the preferred <em>method reference</em> convention.)<span class="intersentencespace"></span> Writing a test for the code in <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase" class="hyperref">Listing&nbsp;<span class="ref">6.20</span></a> is left as an exercise (<a href="https://www.railstutorial.org/book/modeling_users#sec-modeling_users_exercises" class="hyperref">Section&nbsp;<span class="ref">6.5</span></a>).</p>
<p>Now the Alice scenario above will work fine: the database will save a user record based on the first request, and will reject the second save for violating the uniqueness constraint.<span class="intersentencespace"></span> (An error will appear in the Rails log, but that doesn’t do any harm.<span class="intersentencespace"></span> You can actually catch the <code>ActiveRecord::StatementInvalid</code> exception that gets raised, but in this tutorial we won’t bother with this step.)<span class="intersentencespace"></span> Adding this index on the email attribute accomplishes a second goal, alluded to briefly in <a href="https://www.railstutorial.org/book/modeling_users#sec-finding_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.4</span></a>: it fixes an efficiency problem in <code>find_by</code> (<a href="https://www.railstutorial.org/book/modeling_users#sidebar-database_indices" class="hyperref">Box&nbsp;<span class="ref">6.2</span></a>).</p>
<div class="aside" id="_sidebar-database_indices" data-tralics-id="uid480" data-number="6.2"><div class="heading"><span class="number">Box 6.2.</span> 

<span class="description">Database indices</span></div>
<p>When creating a column in a database, it is important to consider whether we will need to <em>find</em> records by that column.<span class="intersentencespace"></span> Consider, for example, the <span class="tt">email</span> attribute created by the migration in <a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a>.<span class="intersentencespace"></span> When we allow users to sign in to the sample app starting in <a href="https://www.railstutorial.org/book/sign_up#cha-sign_up" class="hyperref">Chapter&nbsp;<span class="ref">7</span></a>, we will need to find the user record corresponding to the submitted email address; unfortunately, based on the naïve data model, the only way to find a user by email address is to look through <em>each</em> user row in the database and compare its email attribute to the given email.<span class="intersentencespace"></span> This is known in the database business as a <em>full-table scan</em>, and for a real site with thousands of users it is a <a href="http://catb.org/jargon/html/B/Bad-Thing.html" target="_blank">Bad Thing</a>.</p>
<p>Putting an index on the email column fixes the problem.<span class="intersentencespace"></span> To understand a database index, it’s helpful to consider the analogy of a book index.<span class="intersentencespace"></span> In a book, to find all the occurrences of a given string, say “foobar”, you would have to scan each page for “foobar”.<span class="intersentencespace"></span> With a book index, on the other hand, you can just look up “foobar” in the index to see all the pages containing “foobar”.<span class="intersentencespace"></span> A database index works essentially the same way.</p>

</div></div></div></div><div id="_sec-adding_a_secure_password" data-tralics-id="cid36" class="section" data-number="6.3"><h2><a href="https://www.railstutorial.org/book/modeling_users#sec-adding_a_secure_password" class="heading hyperref"><span class="number">6.3 </span>Adding a secure password</a></h2>
<p>In this section, we’ll add the last of the basic User attributes: a secure password used to authenticate users of the sample application.<span class="intersentencespace"></span> The method is to require each user to have a password (with a password confirmation), and then store a <em>hashed</em> version of the password in the database.<span class="intersentencespace"></span> (There is some potential for confusion here.<span class="intersentencespace"></span> In the present context, a <em>hash</em> refers not to the Ruby data structure from <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-hashes_and_symbols" class="hyperref">Section&nbsp;<span class="ref">4.3.3</span></a> but rather to the result of applying a irreversible <a href="http://en.wikipedia.org/wiki/Hash_function" target="_blank">hash function</a> to input data.)<span class="intersentencespace"></span> We’ll also add a way to <em>authenticate</em> a user based on a given password, a method we’ll use in <a href="https://www.railstutorial.org/book/sign_in_out#cha-sign_in_sign_out" class="hyperref">Chapter&nbsp;<span class="ref">8</span></a> to allow users to sign in to the site.</p>
<p>The method for authenticating users will be to take a submitted password, hash it, and compare the result to the hashed value stored in the database.<span class="intersentencespace"></span> If the two match, then the submitted password is correct and the user is authenticated.<span class="intersentencespace"></span> By comparing hashed values instead of raw passwords, we will be able to authenticate users without storing the passwords themselves.<span class="intersentencespace"></span> This means that, even if our database is compromised, our users’ passwords will still be secure.</p>
<p>Much of the secure password machinery will be implemented using a single Rails method called <code>has_secure_password</code> (first introduced in Rails&nbsp;3.1).<span class="intersentencespace"></span> Because so much of what follows depends on this one method, it is difficult to develop secure passwords incrementally.<span class="intersentencespace"></span> Starting in <a href="https://www.railstutorial.org/book/modeling_users#sec-password_and_confirmation" class="hyperref">Section&nbsp;<span class="ref">6.3.2</span></a>, I recommend adding the <code>has_secure_password</code> method early on and then comment it out before adding each new test to use proper TDD.(Since screencasts allow for a more incremental development approach, interested readers should consider the <a href="http://railstutorial.org/screencasts" target="_blank">Ruby on Rails Tutorial screencasts</a> for a fuller understanding of this material.)</p>
<div id="_sec-a_hashed_password" data-tralics-id="uid481" class="subsection" data-number="6.3.1"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-a_hashed_password" class="heading hyperref"><span class="number">6.3.1 </span>A hashed password</a></h3>
<p>We’ll start with the necessary change to the data model for users, which involves adding a <code>password_digest</code> column to the <code>users</code> table (<a href="https://www.railstutorial.org/book/modeling_users#fig-user_model_password_digest" class="hyperref">Figure&nbsp;<span class="ref">6.5</span></a>).<span class="intersentencespace"></span> The name <em>digest</em> comes from the terminology of <a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function" target="_blank">cryptographic hash functions</a>, and the exact name <code>password_digest</code> is necessary for the implementation in <a href="https://www.railstutorial.org/book/modeling_users#sec-has_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3.4</span></a> to work.<span class="intersentencespace"></span> By hashing the password properly, we’ll ensure that an attacker won’t be able to sign in to the site even if they manage to obtain a copy of the database.</p>
<div class="center figure" id="_fig-user_model_password_digest" data-tralics-id="uid482" data-number="6.5"><span class="graphics"><img src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/user_model_password_digest.png" alt="user_model_password_digest"></span>
<div class="caption"><span class="header">Figure 6.5: </span><span class="description">The User model with an added <code>password_digest</code> attribute.
</span></div></div>
<p>We’ll use the state-of-the-art hash function called <a href="http://en.wikipedia.org/wiki/Bcrypt" target="_blank">bcrypt</a> to irreversibly transform the password to make the password hash.<span class="intersentencespace"></span> To use bcrypt in the sample application, we need to add the <code>bcrypt-ruby</code> gem to our <code>Gemfile</code> (<a href="https://www.railstutorial.org/book/modeling_users#code-bcrypt_ruby" class="hyperref">Listing&nbsp;<span class="ref">6.21</span></a>).</p>
<div class="codelisting" id="_code-bcrypt_ruby" data-tralics-id="uid483" data-number="6.21"><div class="heading"><span class="number">Listing 6.21:</span> 

<span class="description">Adding <code>bcrypt-ruby</code> to the <code>Gemfile</code>.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">ruby</span> <span class="s1">'2.0.0'</span>
<span class="c1">#ruby-gemset=railstutorial_rails_4_0</span>

<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'4.0.8'</span>
<span class="n">gem</span> <span class="s1">'bootstrap-sass'</span><span class="p">,</span> <span class="s1">'2.3.2.0'</span>
<span class="n">gem</span> <span class="s1">'sprockets'</span><span class="p">,</span> <span class="s1">'2.11.0'</span>
<span class="n">gem</span> <span class="s1">'bcrypt-ruby'</span><span class="p">,</span> <span class="s1">'3.1.2'</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
</pre></div></div></div><p>Then run <code>bundle install</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install
</pre></div></div>
<p>Since we want users to have a password digest column, a user object should respond to <code>password_digest</code>, which suggests the test shown in <a href="https://www.railstutorial.org/book/modeling_users#code-respond_to_password_digest" class="hyperref">Listing&nbsp;<span class="ref">6.22</span></a>.</p>
<div class="codelisting" id="_code-respond_to_password_digest" data-tralics-id="uid484" data-number="6.22"><div class="heading"><span class="number">Listing 6.22:</span> 

<span class="description">Ensuring that a User object has a <code>password_digest</code> column.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password_digest</span><span class="p">)</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>To get the test to pass, we first generate an appropriate migration for the <code>password_digest</code> column:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate migration add_password_digest_to_users password_digest:string
</pre></div></div>
<p>Here the first argument is the migration name, and we’ve also supplied a second argument with the name and type of attribute we want to create.<span class="intersentencespace"></span> (Compare this to the original generation of the <code>users</code> table in <a href="https://www.railstutorial.org/book/modeling_users#code-generate_user_model" class="hyperref">Listing&nbsp;<span class="ref">6.1</span></a>.)<span class="intersentencespace"></span> We can choose any migration name we want, but it’s convenient to end the name with <code>_to_users</code>, since in this case Rails automatically constructs a migration to add columns to the <code>users</code> table.<span class="intersentencespace"></span> Moreover, by including the second argument, we’ve given Rails enough information to construct the entire migration for us, as seen in <a href="https://www.railstutorial.org/book/modeling_users#code-password_migration" class="hyperref">Listing&nbsp;<span class="ref">6.23</span></a>.</p>
<div class="codelisting" id="_code-password_migration" data-tralics-id="uid485" data-number="6.23"><div class="heading"><span class="number">Listing 6.23:</span> 

<span class="description">The migration to add a <code>password_digest</code> column to the <code>users</code> table.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">db/migrate/[ts]_add_password_digest_to_users.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AddPasswordDigestToUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:password_digest</span><span class="p">,</span> <span class="ss">:string</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>This code uses the <code>add_column</code> method to add a <code>password_digest</code> column to the <code>users</code> table.</p>
<p>We can get the failing test from <a href="https://www.railstutorial.org/book/modeling_users#code-respond_to_password_digest" class="hyperref">Listing&nbsp;<span class="ref">6.22</span></a> to pass by migrating the development database and preparing the test database:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rake db:migrate
<span class="gp">$</span> bundle <span class="nb">exec </span>rake <span class="nb">test</span>:prepare
<span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div></div>
</div>
<div id="_sec-password_and_confirmation" data-tralics-id="uid486" class="subsection" data-number="6.3.2"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-password_and_confirmation" class="heading hyperref"><span class="number">6.3.2 </span>Password and confirmation</a></h3>
<p>As seen in the mockup in <a href="https://www.railstutorial.org/book/modeling_users#fig-signup_mockup_preview" class="hyperref">Figure&nbsp;<span class="ref">6.1</span></a>, we expect to have users confirm their passwords, a common practice on the web meant to minimize typos.<span class="intersentencespace"></span> We could enforce this at the controller layer, but it’s conventional to put it in the model and use Active Record to enforce the constraint.<span class="intersentencespace"></span> The method is to add <code>password</code> and <code>password_confirmation</code> attributes to the User model, and then require that the two attributes match before the record is saved to the database.<span class="intersentencespace"></span> Unlike the other attributes we’ve seen so far, the password attributes will be <em>virtual</em>—they will only exist temporarily in memory, and will not be persisted to the database.<span class="intersentencespace"></span> As we’ll see in <a href="https://www.railstutorial.org/book/modeling_users#sec-has_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3.4</span></a>, these virtual attributes are implemented automatically by <code>has_secure_password</code>.</p>
<p>We’ll start with <code>respond_to</code> tests for a password and its confirmation, as seen in <a href="https://www.railstutorial.org/book/modeling_users#code-user_respond_to_password" class="hyperref">Listing&nbsp;<span class="ref">6.24</span></a>.</p>
<div class="codelisting" id="_code-user_respond_to_password" data-tralics-id="uid487" data-number="6.24"><div class="heading"><span class="number">Listing 6.24:</span> 

<span class="description">Testing for the <code>password</code> and <code>password_confirmation</code> attributes.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">,</span>
                     <span class="ss">password</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password_digest</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password_confirmation</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><p>Note that we’ve added <code>:password</code> and <code>:password_confirmation</code> to the initialization hash for <code>User.new</code>:</p>
<div class="code"><div class="highlight"><pre><span class="n">before</span> <span class="k">do</span>
  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">,</span>
                   <span class="ss">password</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">)</span>
<span class="k">end</span>
</pre></div></div>
<p>We definitely don’t want users to enter a blank password, so we’ll add another test to validate password presence:</p>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">"when password is not present"</span> <span class="k">do</span>
  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">,</span>
                     <span class="ss">password</span><span class="p">:</span> <span class="s2">" "</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">" "</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div>
<p>Since we’ll be testing password mismatch in a moment, here we make sure to test the <em>presence</em> validation by setting both the password and its confirmation to a blank string.</p>
<p>We also want to ensure that the password and confirmation match.<span class="intersentencespace"></span> The case where they <em>do</em> match is already covered by <code>it { should be_valid }</code>, so we only need to test the case of a mismatch:</p>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">"when password doesn't match confirmation"</span> <span class="k">do</span>
  <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="o">=</span> <span class="s2">"mismatch"</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div>
<p>Putting everything together gives the (failing) tests in <a href="https://www.railstutorial.org/book/modeling_users#code-password_tests" class="hyperref">Listing&nbsp;<span class="ref">6.25</span></a>.</p>
<div class="codelisting" id="_code-password_tests" data-tralics-id="uid488" data-number="6.25"><div class="heading"><span class="number">Listing 6.25:</span> 

<span class="description">Test for the password and password confirmation.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">,</span>
                     <span class="ss">password</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password_digest</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:password_confirmation</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"when password is not present"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="k">do</span>
      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">,</span>
                       <span class="ss">password</span><span class="p">:</span> <span class="s2">" "</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">" "</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"when password doesn't match confirmation"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="o">=</span> <span class="s2">"mismatch"</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_valid</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>We can get the tests in <a href="https://www.railstutorial.org/book/modeling_users#code-password_tests" class="hyperref">Listing&nbsp;<span class="ref">6.25</span></a> to pass using just one extra line of code, as shown in <a href="https://www.railstutorial.org/book/modeling_users#code-initial_passing_password_tests" class="hyperref">Listing&nbsp;<span class="ref">6.26</span></a>.</p>
<div class="codelisting" id="_code-initial_passing_password_tests" data-tralics-id="uid489" data-number="6.26"><div class="heading"><span class="number">Listing 6.26:</span> 

<span class="description">Getting the initial password tests to pass.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">has_secure_password</span>
<span class="k">end</span>
</pre></div></div></div><p>It’s remarkable that the one line</p>
<div class="code"><div class="highlight"><pre><span class="n">has_secure_password</span>
</pre></div></div>
<p>gets all of the current password tests to pass, and it does a lot more besides.<span class="intersentencespace"></span> Indeed, it does too much, preventing some of the upcoming tests from being red before going green, so before proceeding I recommend commenting it out (<a href="https://www.railstutorial.org/book/modeling_users#code-commented_out_has_secure_password" class="hyperref">Listing&nbsp;<span class="ref">6.27</span></a>).</p>
<div class="codelisting" id="_code-commented_out_has_secure_password" data-tralics-id="uid490" data-number="6.27"><div class="heading"><span class="number">Listing 6.27:</span> 

<span class="description">Commenting out <code>has_secure_password</code> for the sake of TDD. <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="c1"># has_secure_password</span>
<span class="k">end</span>
</pre></div></div></div></div>
<div id="_sec-user_authentication" data-tralics-id="uid491" class="subsection" data-number="6.3.3"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-user_authentication" class="heading hyperref"><span class="number">6.3.3 </span>User authentication</a></h3>
<p>The final piece of our password machinery is a method to retrieve users based on their email and passwords.<span class="intersentencespace"></span> This divides naturally into two parts: first, find a user by email address; second, authenticate the user with a given password.<span class="intersentencespace"></span> All but the last of the tests in this section are implemented by <code>has_secure_password</code>, so while implementing them you should be able to uncomment the commented-out line in <a href="https://www.railstutorial.org/book/modeling_users#code-commented_out_has_secure_password" class="hyperref">Listing&nbsp;<span class="ref">6.27</span></a> to get them to pass.</p>
<p>The first step is simple; as we saw in <a href="https://www.railstutorial.org/book/modeling_users#sec-finding_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.4</span></a>, we can find a user with a given email address using the <code>find_by</code> method:</p>
<div class="code"><div class="highlight"><pre><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span>
</pre></div></div>
<p>The second step is then to use an <code>authenticate</code> method to verify that the user has the given password.<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/sign_in_out#cha-sign_in_sign_out" class="hyperref">Chapter&nbsp;<span class="ref">8</span></a>, we’ll retrieve the current (signed-in) user using code something like this:</p>
<div class="code"><div class="highlight"><pre><span class="n">current_user</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</pre></div></div>
<p>If the given password matches the user’s password, it should return the user; otherwise, it should return <code>false</code>.</p>
<p>As usual, we can express the requirement for <code>authenticate</code> using RSpec.<span class="intersentencespace"></span> The resulting tests are more advanced than the others we’ve seen, so let’s break them down into pieces; if you’re new to RSpec, you might want to read this section a couple of times.<span class="intersentencespace"></span> We start by requiring a User object to respond to <code>authenticate</code>:</p>
<div class="code"><div class="highlight"><pre><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:authenticate</span><span class="p">)</span> <span class="p">}</span>
</pre></div></div>
<p>We then cover the two cases of password match and mismatch:</p>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">"return value of authenticate method"</span> <span class="k">do</span>
  <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:found_user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s2">"with valid password"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span> <span class="n">found_user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">password</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"with invalid password"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:user_for_invalid_password</span><span class="p">)</span> <span class="p">{</span> <span class="n">found_user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s2">"invalid"</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">eq</span> <span class="n">user_for_invalid_password</span> <span class="p">}</span>
    <span class="n">specify</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">user_for_invalid_password</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_false</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div>
<p>The <code>before</code> block saves the user to the database so that it can be retrieved using <code>find_by</code>, which we accomplish using the <code>let</code> method:</p>
<div class="code"><div class="highlight"><pre><span class="n">let</span><span class="p">(</span><span class="ss">:found_user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span> <span class="p">}</span>
</pre></div></div>
<p>We’ve used <code>let</code> in a couple of exercises, but this is the first time we’ve seen it in the body of the tutorial.<span class="intersentencespace"></span> <a href="https://www.railstutorial.org/book/modeling_users#sidebar-let" class="hyperref">Box&nbsp;<span class="ref">6.3</span></a> covers <code>let</code> in more detail.</p>
<p>The two <code>describe</code> blocks cover the case where <code>@user</code> and <code>found_user</code> should be the same (password match) and different (password mismatch); they use the “equals” <code>eq</code> test for object equality (which uses <code>==</code> to test equality, as seen in <a href="https://www.railstutorial.org/book/rails_flavored_ruby#sec-arrays_and_ranges" class="hyperref">Section&nbsp;<span class="ref">4.3.1</span></a>).<span class="intersentencespace"></span> Note that the tests in</p>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">"with invalid password"</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user_for_invalid_password</span><span class="p">)</span> <span class="p">{</span> <span class="n">found_user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s2">"invalid"</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">eq</span> <span class="n">user_for_invalid_password</span> <span class="p">}</span>
  <span class="n">specify</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">user_for_invalid_password</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_false</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div>
<p>use <code>let</code> a second time, and also use the <code>specify</code> method.<span class="intersentencespace"></span> This is just a synonym for <code>it</code>, and can be used when writing <code>it</code> would sound unnatural.<span class="intersentencespace"></span> In this case, it sounds OK to say “it [i.e., the user] should not equal user for invalid password”, but it sounds strange to say “it user for invalid password should be false”; saying “specify: expect user for invalid password to be false” sounds better.</p>
<div class="aside" id="_sidebar-let" data-tralics-id="uid492" data-number="6.3"><div class="heading"><span class="number">Box 6.3.</span> 

<span class="description">Using <span class="tt">let</span></span></div>
<p>RSpec’s <span class="tt">let</span> method provides a convenient way to create local variables inside tests.<span class="intersentencespace"></span> The syntax might look a little strange, but its effect is similar to variable assignment.<span class="intersentencespace"></span> The argument of <span class="tt">let</span> is a symbol, and it takes a block whose return value is assigned to a local variable with the symbol’s name.<span class="intersentencespace"></span> In other words,</p>
<pre>let(:found_user) { User.find_by(email: @user.email) }</pre>
<p>creates a <span class="tt">found_user</span> variable whose value is equal to the result of <span class="tt">find_by</span>.<span class="intersentencespace"></span> We can then use this variable in any of the <span class="tt">before</span> or <span class="tt">it</span> blocks throughout the rest of the test.<span class="intersentencespace"></span> One advantage of <span class="tt">let</span> is that it <em>memoizes</em> its value, which means that it remembers the value from one invocation to the next.<span class="intersentencespace"></span> (Note that <a href="http://en.wikipedia.org/wiki/Memoization" target="_blank"><em>memoize</em></a> is a technical term; in particular, it’s <em>not</em> a misspelling of “memorize”.)<span class="intersentencespace"></span> In the present case, because <span class="tt">let</span> memoizes the <span class="tt">found_user</span> variable, the <span class="tt">find_by</span> method will only be called once whenever the User model specs are run.<span class="intersentencespace"></span></p>

</div><p>Finally, as a security precaution, we’ll test for a length validation on passwords, requiring that they be at least six characters long:</p>
<div class="code"><div class="highlight"><pre><span class="n">describe</span> <span class="s2">"with a password that's too short"</span> <span class="k">do</span>
  <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="o">=</span> <span class="s2">"a"</span> <span class="o">*</span> <span class="mi">5</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_invalid</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div>
<p>Putting together all the tests above gives <a href="https://www.railstutorial.org/book/modeling_users#code-authenticate_spec" class="hyperref">Listing&nbsp;<span class="ref">6.28</span></a>.</p>
<div class="codelisting" id="_code-authenticate_spec" data-tralics-id="uid493" data-number="6.28"><div class="heading"><span class="number">Listing 6.28:</span> 

<span class="description">Tests for password length and the <code>authenticate</code> method.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>

  <span class="n">before</span> <span class="k">do</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Example User"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"user@example.com"</span><span class="p">,</span>
                     <span class="ss">password</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:authenticate</span><span class="p">)</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"with a password that's too short"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="o">=</span> <span class="s2">"a"</span> <span class="o">*</span> <span class="mi">5</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_invalid</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">describe</span> <span class="s2">"return value of authenticate method"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span> <span class="p">}</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:found_user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">describe</span> <span class="s2">"with valid password"</span> <span class="k">do</span>
      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span> <span class="n">found_user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">password</span><span class="p">)</span> <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">describe</span> <span class="s2">"with invalid password"</span> <span class="k">do</span>
      <span class="n">let</span><span class="p">(</span><span class="ss">:user_for_invalid_password</span><span class="p">)</span> <span class="p">{</span> <span class="n">found_user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s2">"invalid"</span><span class="p">)</span> <span class="p">}</span>

      <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">eq</span> <span class="n">user_for_invalid_password</span> <span class="p">}</span>
      <span class="n">specify</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">user_for_invalid_password</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_false</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>As noted in <a href="https://www.railstutorial.org/book/modeling_users#sidebar-let" class="hyperref">Box&nbsp;<span class="ref">6.3</span></a>, <code>let</code> memoizes its value, so that the first nested <code>describe</code> block in <a href="https://www.railstutorial.org/book/modeling_users#code-authenticate_spec" class="hyperref">Listing&nbsp;<span class="ref">6.28</span></a> invokes <code>let</code> to retrieve the user from the database using <code>find_by</code>, but the second <code>describe</code> block doesn’t hit the database a second time.</p>
</div>
<div id="_sec-has_secure_password" data-tralics-id="uid494" class="subsection" data-number="6.3.4"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-has_secure_password" class="heading hyperref"><span class="number">6.3.4 </span>User has secure password</a></h3>
<p>In previous versions of Rails, adding a secure password was difficult and time-consuming, as seen in the <a href="http://railstutorial.org/book?version=3.0" target="_blank">Rails&nbsp;3.0 version of the <em>Rails Tutorial</em></a>,<sup id="_cha-6_footnote-ref-18" class="footnote"><a href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-18">18</a></sup> which covers the creation of an authentication system from scratch.<span class="intersentencespace"></span> But web developers’ understanding of how best to authenticate users has matured enough that it now comes bundled with the latest version of Rails.<span class="intersentencespace"></span> As a result, we’ll complete the implementation of secure passwords (and get to a green test suite) using only a few lines of code.</p>
<p>First, we need a length validation for the password, which uses the <code>:minimum</code> key in analogy with the <code>:maximum</code> key from <a href="https://www.railstutorial.org/book/modeling_users#code-length_validation" class="hyperref">Listing&nbsp;<span class="ref">6.12</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">6</span> <span class="p">}</span>
</pre></div></div>
<p>(Presence validations for the password and its confirmation are automatically added by <code>has_secure_password</code>.)</p>
<p>Second, we need to add <code>password</code> and <code>password_confirmation</code> attributes, require the presence of the password, require that they match, and add an <code>authenticate</code> method to compare a hashed password to the <code>password_digest</code> to authenticate users.<span class="intersentencespace"></span> This is the only nontrivial step, and in the latest version of Rails all these features come for free with one method, <code>has_secure_password</code>:</p>
<div class="code"><div class="highlight"><pre><span class="n">has_secure_password</span>
</pre></div></div>
<p>As long as there is a <code>password_digest</code> column in the database, adding this one method to our model gives us a secure way to create and authenticate new users.</p>
<p>(If you’d like to see how <code>has_secure_password</code> is implemented, I suggest taking a look at <a href="https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb" target="_blank">the source code for <span class="tt">secure_password.rb</span></a>, which is well-documented and quite readable.<span class="intersentencespace"></span> That code includes the lines</p>
<div class="code"><div class="highlight"><pre><span class="n">validates_confirmation_of</span> <span class="ss">:password</span><span class="p">,</span>
                          <span class="k">if</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">.</span><span class="n">password</span><span class="o">.</span><span class="n">present?</span> <span class="p">}</span>
</pre></div></div>
<p>which (as described in the <a href="http://api.rubyonrails.org/v4.0.0/classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of" target="_blank">Rails API</a>) automagically creates an attribute called <code>password_confirmation</code>.<span class="intersentencespace"></span> It also includes a validation for the <code>password_digest</code> attribute.)</p>
<p>Together with the presence validation from <a href="https://www.railstutorial.org/book/modeling_users#code-initial_passing_password_tests" class="hyperref">Listing&nbsp;<span class="ref">6.26</span></a>, the elements above yield the User model shown in <a href="https://www.railstutorial.org/book/modeling_users#code-password_implementation" class="hyperref">Listing&nbsp;<span class="ref">6.29</span></a>, which completes the implementation of secure passwords.</p>
<div class="codelisting" id="_code-password_implementation" data-tralics-id="uid496" data-number="6.29"><div class="heading"><span class="number">Listing 6.29:</span> 

<span class="description">The complete implementation for secure passwords.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_save</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">.</span><span class="n">downcase</span> <span class="p">}</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">}</span>
  <span class="no">VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span>   <span class="kp">true</span><span class="p">,</span>
                    <span class="nb">format</span><span class="p">:</span>     <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="no">VALID_EMAIL_REGEX</span> <span class="p">},</span>
                    <span class="ss">uniqueness</span><span class="p">:</span> <span class="p">{</span> <span class="ss">case_sensitive</span><span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
  <span class="n">has_secure_password</span>
  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">6</span> <span class="p">}</span>
<span class="k">end</span>
</pre></div></div></div><p>You should confirm at this point that the test suite passes:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle <span class="nb">exec </span>rspec spec/
</pre></div></div>
<p><em>Note</em>: If you get a deprecation warning like</p>
<div class="code"><div class="highlight"><pre>[deprecated] I18n.enforce_available_locales will default to true in the future
</pre></div></div>
<p>you can get rid of it by editing <code>config/application.rb</code> as follows:</p>
<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">'../boot'</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="k">module</span> <span class="nn">SampleApp</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="no">I18n</span><span class="o">.</span><span class="n">enforce_available_locales</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="o">.</span>
    <span class="o">.</span>
    <span class="o">.</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div>
</div>
<div id="_sec-creating_a_user" data-tralics-id="uid497" class="subsection" data-number="6.3.5"><h3><a href="https://www.railstutorial.org/book/modeling_users#sec-creating_a_user" class="heading hyperref"><span class="number">6.3.5 </span>Creating a user</a></h3>
<p>Now that the basic User model is complete, we’ll create a user in the database as preparation for making a page to show the user’s information in <a href="https://www.railstutorial.org/book/sign_up#sec-showing_users" class="hyperref">Section&nbsp;<span class="ref">7.1</span></a>.<span class="intersentencespace"></span> This also gives us a chance to make the work from the previous sections feel more concrete; merely getting the test suite to pass may seem anti-climactic, and it will be gratifying to see an actual user record in the development database.</p>
<p>Since we can’t yet sign up through the web—that’s the goal of <a href="https://www.railstutorial.org/book/sign_up#cha-sign_up" class="hyperref">Chapter&nbsp;<span class="ref">7</span></a>—we’ll use the Rails console to create a new user by hand.<span class="intersentencespace"></span> In contrast to <a href="https://www.railstutorial.org/book/modeling_users#sec-creating_user_objects" class="hyperref">Section&nbsp;<span class="ref">6.1.3</span></a>, in this section we’ll take care <em>not</em> to start in a sandbox, since this time the whole point is to save a record to the database:</p>
<div class="code"><div class="highlight"><pre><span class="go">$ rails console</span>
<span class="gp">&gt;&gt; </span><span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">"Michael Hartl"</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">"mhartl@example.com"</span><span class="p">,</span>
<span class="gp">?&gt; </span>            <span class="ss">password</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s2">"foobar"</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 20:45:19", updated_at: "2013-03-11 20:45:19",</span>
<span class="go">password_digest: "$2a$10$kn4cQDJTzV76ZgDxOWk6Je9A0Ttn5sKNaGTEmT0jU7.n..."&gt;</span>
</pre></div></div>
<p>To check that this worked, let’s look at the row in the development database (<code>db/development.sqlite3</code>) using the SQLite Database Browser (<a href="https://www.railstutorial.org/book/modeling_users#fig-sqlite_user_row" class="hyperref">Figure <span class="ref">6.6</span></a>).<span class="intersentencespace"></span> Note that the columns correspond to the attributes of the data model defined in <a href="https://www.railstutorial.org/book/modeling_users#fig-user_model_password_digest" class="hyperref">Figure&nbsp;<span class="ref">6.5</span></a>.</p>
<div class="center figure" id="_fig-sqlite_user_row" data-tralics-id="uid498" data-number="6.6">
<div class="graphics image box"><img src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/sqlite_user_row_with_password_4_0.png" alt="images/figures/sqlite_user_row_with_password_4_0"></div><div class="caption"><span class="header">Figure 6.6: </span><span class="description">A user row in the SQLite database <code>db/development.sqlite3</code>.
</span></div></div>
<p>Returning to the console, we can see the effect of <code>has_secure_password</code> from <a href="https://www.railstutorial.org/book/modeling_users#code-password_implementation" class="hyperref">Listing&nbsp;<span class="ref">6.29</span></a> by looking at the <code>password_digest</code> attribute:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="s2">"mhartl@example.com"</span><span class="p">)</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">password_digest</span>
<span class="go">=&gt; "$2a$10$kn4cQDJTzV76ZgDxOWk6Je9A0Ttn5sKNaGTEmT0jU7.ncBJ/60gHq"</span>
</pre></div></div>
<p>This is the hashed version of the password (<code>"foobar"</code>) used to initialize the user object.<span class="intersentencespace"></span> We can also verify that the <code>authenticate</code> command is working by first using an invalid password and then a valid one:</p>
<div class="code"><div class="highlight"><pre><span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s2">"invalid"</span><span class="p">)</span>
<span class="go">=&gt; false</span>
<span class="gp">&gt;&gt; </span><span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s2">"foobar"</span><span class="p">)</span>
<span class="go">=&gt; #&lt;User id: 1, name: "Michael Hartl", email: "mhartl@example.com",</span>
<span class="go">created_at: "2013-03-11 20:45:19", updated_at: "2013-03-11 20:45:19",</span>
<span class="go">password_digest: "$2a$10$kn4cQDJTzV76ZgDxOWk6Je9A0Ttn5sKNaGTEmT0jU7.n..."&gt;</span>
</pre></div></div>
<p>As required by the tests in <a href="https://www.railstutorial.org/book/modeling_users#code-authenticate_spec" class="hyperref">Listing&nbsp;<span class="ref">6.28</span></a>, <code>authenticate</code> returns <code>false</code> if the password is invalid and the user itself if the password is valid.</p>
</div></div><div id="_cid37" data-tralics-id="cid37" class="section" data-number="6.4"><h2><a href="https://www.railstutorial.org/book/modeling_users#cid37" class="heading hyperref"><span class="number">6.4 </span>Conclusion</a></h2>
<p>Starting from scratch, in this chapter we created a working User model with <code>name</code>, <code>email</code>, and various password attributes, together with validations enforcing several important constraints on their values.<span class="intersentencespace"></span> In addition, we can securely authenticate users using a given password.<span class="intersentencespace"></span> In previous versions of Rails, such a feat would have taken more than twice as much code, but because of the compact <code>validates</code> method and <code>has_secure_password</code>, we were able to build a complete User model using less than a dozen lines of code.</p>
<p>In the next chapter, <a href="https://www.railstutorial.org/book/sign_up#cha-sign_up" class="hyperref">Chapter&nbsp;<span class="ref">7</span></a>, we’ll make a working signup form to create new users, together with a page to display each user’s information.<span class="intersentencespace"></span> In <a href="https://www.railstutorial.org/book/sign_in_out#cha-sign_in_sign_out" class="hyperref">Chapter&nbsp;<span class="ref">8</span></a>, we’ll use the authentication machinery from <a href="https://www.railstutorial.org/book/modeling_users#sec-adding_a_secure_password" class="hyperref">Section&nbsp;<span class="ref">6.3</span></a> to let users sign into the site.</p>
<p>If you’re using Git, now would be a good time to commit if you haven’t done so in a while:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">"Make a basic User model (including secure passwords)"</span>
</pre></div></div>
<p>Then merge back into the master branch:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="gp">$</span> git merge modeling-users
</pre></div></div>
</div><div id="_sec-modeling_users_exercises" data-tralics-id="cid38" class="section" data-number="6.5"><h2><a href="https://www.railstutorial.org/book/modeling_users#sec-modeling_users_exercises" class="heading hyperref"><span class="number">6.5 </span>Exercises</a></h2>
<ol><li>Add a test for the email downcasing from <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase" class="hyperref">Listing&nbsp;<span class="ref">6.20</span></a>, as shown in <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase_test" class="hyperref">Listing&nbsp;<span class="ref">6.30</span></a>.<span class="intersentencespace"></span> This test uses the <code>reload</code> method for reloading a value from the database and the <code>eq</code> method for testing equality.<span class="intersentencespace"></span> By commenting out the <code>before_save</code> line, verify that <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase_test" class="hyperref">Listing&nbsp;<span class="ref">6.30</span></a> tests the right thing.
</li>
<li>By running the test suite, verify that the <code>before_save</code> callback can be written as shown in <a href="https://www.railstutorial.org/book/modeling_users#code-downcase_bang" class="hyperref">Listing&nbsp;<span class="ref">6.31</span></a>.
</li>
<li>As noted in <a href="https://www.railstutorial.org/book/modeling_users#sec-format_validation" class="hyperref">Section&nbsp;<span class="ref">6.2.4</span></a>, the email regex in <a href="https://www.railstutorial.org/book/modeling_users#code-validates_format_of_email" class="hyperref">Listing&nbsp;<span class="ref">6.14</span></a> allows invalid email addresses with consecutive dots, i.e., addresses of the form “foo@bar..com”.<span class="intersentencespace"></span> Add this address to the list of invalid address in <a href="https://www.railstutorial.org/book/modeling_users#code-email_format_validation_tests" class="hyperref">Listing&nbsp;<span class="ref">6.13</span></a> to get a failing test, and then use the more complicated regex shown in <a href="https://www.railstutorial.org/book/modeling_users#code-better_email_regex" class="hyperref">Listing&nbsp;<span class="ref">6.32</span></a> to get the test to pass.
</li>
<li>Read through the Rails API entry for <code>ActiveRecord::Base</code> to get a sense of its capabilities.
</li>
<li>Study the entry in the Rails API for the <code>validates</code> method to learn more about its capabilities and options.
</li>
<li>Spend a couple of hours playing with <a href="http://www.rubular.com/" target="_blank">Rubular</a>.
</li></ol><div class="codelisting" id="_code-email_downcase_test" data-tralics-id="uid505" data-number="6.30"><div class="heading"><span class="number">Listing 6.30:</span> 

<span class="description">A test for the email downcasing from <a href="https://www.railstutorial.org/book/modeling_users#code-email_downcase" class="hyperref">Listing&nbsp;<span class="ref">6.20</span></a>.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">spec/models/user_spec.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="n">describe</span> <span class="s2">"email address with mixed case"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:mixed_case_email</span><span class="p">)</span> <span class="p">{</span> <span class="s2">"Foo@ExAMPle.CoM"</span> <span class="p">}</span>

    <span class="n">it</span> <span class="s2">"should be saved as all lower-case"</span> <span class="k">do</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">mixed_case_email</span>
      <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
      <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">reload</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">mixed_case_email</span><span class="o">.</span><span class="n">downcase</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="_code-downcase_bang" data-tralics-id="uid506" data-number="6.31"><div class="heading"><span class="number">Listing 6.31:</span> 

<span class="description">An alternate implementation of the <code>before_save</code> callback.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_secure_password</span>
  <span class="n">before_save</span> <span class="p">{</span> <span class="n">email</span><span class="o">.</span><span class="n">downcase!</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div><div class="codelisting" id="_code-better_email_regex" data-tralics-id="uid507" data-number="6.32"><div class="heading"><span class="number">Listing 6.32:</span> 

<span class="description">A valid email regex that disallows double dots in email addresses.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/user.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="no">VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/\A[\w+\-.]+@[a-z\d\-]+(?:\.[a-z\d\-]+)*\.[a-z]+\z/i</span>
  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">with</span><span class="p">:</span> <span class="no">VALID_EMAIL_REGEX</span> <span class="p">},</span>
                    <span class="ss">uniqueness</span><span class="p">:</span> <span class="p">{</span> <span class="ss">case_sensitive</span><span class="p">:</span> <span class="kp">false</span> <span class="p">}</span>
  <span class="o">.</span>
  <span class="o">.</span>
  <span class="o">.</span>
<span class="k">end</span>
</pre></div></div></div></div><div id="cha-6_footnotes">
  <ol class="footnotes"><li id="_cha-6_footnote-1">The name comes from the “<a href="http://en.wikipedia.org/wiki/Active_record_pattern" target="_blank">active record pattern</a>”, identified and named in <em>Patterns of Enterprise Application Architecture</em> by Martin Fowler.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-1">↑</a></li>
    <li id="_cha-6_footnote-2">Pronounced “ess-cue-ell”, though the alternate pronunciation “sequel” is also common.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-2">↑</a></li>
    <li id="_cha-6_footnote-3">By using an email address as the username, we open the theoretical possibility of communicating with our users at a future date.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-3">↑</a></li>
    <li id="_cha-6_footnote-4">Don’t worry about exactly how the <code>t</code>&nbsp;object manages to do this; the beauty of <em>abstraction layers</em> is that we don’t have to know.<span class="intersentencespace"></span> We can just trust the <code>t</code>&nbsp;object to do its job.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-4">↑</a></li>
    <li id="_cha-6_footnote-5">Officially pronounced “ess-cue-ell-ite”, although the (mis)pronunciation “sequel-ite” is also common.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-5">↑</a></li>
    <li id="_cha-6_footnote-6">In case you’re curious about <code>"2013-03-11 00:57:46"</code>, I’m not writing this after midnight; the timestamps are recorded in <a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time" target="_blank">Coordinated Universal Time</a> (UTC), which for most practical purposes is the same as <a href="http://en.wikipedia.org/wiki/Greenwich_Mean_Time" target="_blank">Greenwich Mean Time</a>.<span class="intersentencespace"></span> From the <a href="http://tf.nist.gov/general/misc.htm" target="_blank">NIST Time and Frequency FAQ</a>: <strong>Q:</strong> Why is UTC used as the acronym for Coordinated Universal Time instead of CUT? <strong>A:</strong> In 1970 the Coordinated Universal Time system was devised by an international advisory group of technical experts within the International Telecommunication Union (ITU).<span class="intersentencespace"></span> The ITU felt it was best to designate a single abbreviation for use in all languages in order to minimize confusion.<span class="intersentencespace"></span> Since unanimous agreement could not be achieved on using either the English word order, CUT, or the French word order, TUC, the acronym UTC was chosen as a compromise.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-6">↑</a></li>
    <li id="_cha-6_footnote-7">Note the value of <code>user.updated_at</code>.<span class="intersentencespace"></span> Told you the timestamp was in UTC.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-7">↑</a></li>
    <li id="_cha-6_footnote-8">Exceptions and exception handling are somewhat advanced Ruby subjects, and we won’t need them much in this book.<span class="intersentencespace"></span> They are important, though, and I suggest learning about them using one of the Ruby books recommended in <a href="https://www.railstutorial.org/book/beginning#sec-comments_for_various_readers" class="hyperref">Section&nbsp;<span class="ref">1.1.1</span></a>.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-8">↑</a></li>
    <li id="_cha-6_footnote-9">This assumes you are using SQLite locally.<span class="intersentencespace"></span> These files won’t exist if you are instead using Postgres, as suggested in the <a href="https://www.railstutorial.org/book/static_pages#cha-static_pages" class="hyperref">Chapter&nbsp;<span class="ref">3</span></a> exercise.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-9">↑</a></li>
    <li id="_cha-6_footnote-10">I’ll omit the output of console commands when they are not particularly instructive—for example, the results of <code>User.new</code>.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-10">↑</a></li>
    <li id="_cha-6_footnote-11">Note that, in <a href="https://www.railstutorial.org/book/modeling_users#table-valid_email_regex" class="hyperref">Table&nbsp;<span class="ref">6.1</span></a>, “letter” really means “lower-case letter”, but the <code>i</code> at the end of the regex enforces case-insensitive matching.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-11">↑</a></li>
    <li id="_cha-6_footnote-12">If you find it as useful as I do, I encourage you to <a href="http://bit.ly/donate-to-rubular" target="_blank">donate to Rubular</a> to reward developer <a href="http://lovitt.net/" target="_blank">Michael Lovitt</a> for his wonderful work.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-12">↑</a></li>
    <li id="_cha-6_footnote-13">Did you know that <code>"Michael Hartl"@example.com</code>, with quotation marks and a space in the middle, is a valid email address according to the standard?<span class="intersentencespace"></span> Incredibly, it is—but it’s absurd.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-13">↑</a></li>
    <li id="_cha-6_footnote-14">As noted briefly in the introduction to this section, there is a dedicated test database, <code>db/test.sqlite3</code>, for this purpose.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-14">↑</a></li>
    <li id="_cha-6_footnote-15">Technically, only the domain part of the email address is case-insensitive: foo@bar.com is actually different from Foo@bar.com.<span class="intersentencespace"></span> In practice, though, it is a bad idea to rely on this fact; as noted at <a href="http://email.about.com/od/emailbehindthescenes/f/email_case_sens.htm" target="_blank">about.com</a>, “Since the case sensitivity of email addresses can create a lot of confusion, interoperability problems and widespread headaches, it would be foolish to require email addresses to be typed with the correct case.<span class="intersentencespace"></span> Hardly any email service or ISP does enforce case sensitive email addresses, returning messages whose recipient’s email address was not typed correctly (in all upper case, for example).”<span class="intersentencespace"></span> Thanks to reader Riley Moses for pointing this out.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-15">↑</a></li>
    <li id="_cha-6_footnote-16">Of course, we could just edit the migration file for the <code>users</code> table in <a href="https://www.railstutorial.org/book/modeling_users#code-users_migration" class="hyperref">Listing&nbsp;<span class="ref">6.2</span></a> but that would require rolling back and then migrating back up.<span class="intersentencespace"></span> The Rails Way is to use migrations every time we discover that our data model needs to change.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-16">↑</a></li>
    <li id="_cha-6_footnote-17">Direct experimentation with SQLite on my system and PostgreSQL on Heroku show that this step is, in fact, necessary.&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-17">↑</a></li>
    <li id="_cha-6_footnote-18">http://railstutorial.org/book?version=3.0&nbsp;<a class="arrow" href="https://www.railstutorial.org/book/modeling_users#cha-6_footnote-ref-18">↑</a></li>
  </ol></div></div></div>
<div id="bookBottomMenu">
<div class="bookMenuArows">
<a href="javascript://" class="leftArrow">◄</a>
<a href="javascript://" class="upArrow">▲</a>
<a href="javascript://" class="rightArrow">►</a>
</div>
</div>
</div>
<div id="bookContentNotAvailable">
<img alt="Empty_content" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/empty_content-ccbfa2e7e03ec571f0360d9bdd87eff3.png">
Sorry, content not available
</div>
</div>
<div class="emailPitch" id="bookEmailModal">
<a href="javascript://" class="emailSignupClose" onclick="closeEmailPops()">x</a>
<strong>STAY UP TO DATE!</strong>
<p>Joining the email list for this book will allow the author to contact you to let you know about special offers and when updates for the book are available.</p>
<div class="j_followBookForm"><form accept-charset="UTF-8" action="https://www.softcover.io/follow/28fdb94f/ruby_on_rails_tutorial" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="✓"></div>
<!-- %input{name: "name", type: "text", placeholder: "YOUR NAME"} -->
<input name="email" placeholder="YOUR EMAIL ADDRESS" type="text">
<input class="greyButton optClick_follow" type="submit" value="Follow Book">
</form>

</div>
</div>
<script>
  // setup book nav
  Book.init({
    title: "Ruby on Rails Tutorial",
    path: "/book",
    slug: "ruby_on_rails_tutorial",
    s3_path_prefix: "636/ruby_on_rails_tutorial",
    chapters: [{"title":"Frontmatter\n","number":0,"slug":"frontmatter","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/frontmatter_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=Hs8ABkWBeClN9djzX8G1z/AWil4%3D&Expires=1412721834"},{"title":"Chapter 1: From zero to deploy\n","number":1,"slug":"beginning","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/beginning_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=vseKi33l1%2BVIPW4qRszrbK02DZw%3D&Expires=1412721835"},{"title":"Chapter 2: A demo app\n","number":2,"slug":"demo_app","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/demo_app_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=3FPGd9XMo%2BUlC9ZRFxA7OytyDns%3D&Expires=1412721835"},{"title":"Chapter 3: Mostly static pages\n","number":3,"slug":"static_pages","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/static_pages_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=8USTMrm0ujCgM0oE2/FHySW86wM%3D&Expires=1412721835"},{"title":"Chapter 4: Rails-flavored Ruby\n","number":4,"slug":"rails_flavored_ruby","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/rails_flavored_ruby_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=dAREYah7TN0YKZnpwstDDdHm6MQ%3D&Expires=1412721835"},{"title":"Chapter 5: Filling in the layout\n","number":5,"slug":"filling_in_the_layout","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/filling_in_the_layout_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=0gRlsTE9YwPRYl4gJ4yfOMT1WBQ%3D&Expires=1412721835"},{"title":"Chapter 6: Modeling users\n","number":6,"slug":"modeling_users","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/modeling_users_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=dTZYy6aa3yylpxmnleAIlJwiLH4%3D&Expires=1412721835"},{"title":"Chapter 7: Sign up\n","number":7,"slug":"sign_up","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/sign_up_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=rRylx8lmTWUyCBUwZchzZvkY8j0%3D&Expires=1412721835"},{"title":"Chapter 8: Sign in, sign out\n","number":8,"slug":"sign_in_out","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/sign_in_out_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=D9FcqEajQ26C0WGWjQLsFNBO8vo%3D&Expires=1412721835"},{"title":"Chapter 9: Updating, showing, and deleting users\n","number":9,"slug":"updating_and_deleting_users","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/updating_and_deleting_users_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=6goQLBI51RvrA6/gGr9r6Ro0oDg%3D&Expires=1412721835"},{"title":"Chapter 10: User microposts\n","number":10,"slug":"user_microposts","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/user_microposts_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=UCZfxFUNSZ7f1yuWKBL/d6dsNOo%3D&Expires=1412721835"},{"title":"Chapter 11: Following users\n","number":11,"slug":"following_users","s3_url":"https://softcover.s3.amazonaws.com/636/ruby_on_rails_tutorial/html/following_users_fragment.html?AWSAccessKeyId=AKIAJMNNDDBSYVXVHGAA&Signature=ncMW5eNjfHJU9V8sFZhcFbbDcLQ%3D&Expires=1412721835"}],
    full_page: false
  });
</script>

</div>
</div>
<div class="footer clearfix">
<div class="wrapper" id="hide_chromeFooter">
<em>powered by</em>
<a href="http://www.softcover.io/" class="logo"><img alt="Logo_foot" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/logo_foot-39da4a3be1566a91864f2712656b404e.png">
</a></div>
</div>

<script type="text/javascript">
setTimeout(function(){var a=document.createElement("script");
var b=document.getElementsByTagName("script")[0];
a.src=document.location.protocol+"//dnn506yrbagrg.cloudfront.net/pages/scripts/0023/6713.js?"+Math.floor(new Date().getTime()/3600000);
a.async=true;a.type="text/javascript";b.parentNode.insertBefore(a,b)}, 1);
</script>

<script type="text/javascript">
  var _sf_async_config = { uid: 9895, domain: 'softcover.io', useCanonical: true };
  (function() {
    function loadChartbeat() {
      window._sf_endpt = (new Date()).getTime();
      var e = document.createElement('script');
      e.setAttribute('language', 'javascript');
      e.setAttribute('type', 'text/javascript');
      e.setAttribute('src','//static.chartbeat.com/js/chartbeat.js');
      document.body.appendChild(e);
    };
    var oldonload = window.onload;
    window.onload = (typeof window.onload != 'function') ?
      loadChartbeat : function() { oldonload(); loadChartbeat(); };
  })();
</script>

<script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l=document.getElementsByTagName("a"),t=document.createElement("textarea");for(i=0;l.length-i;i++){try{a=l[i].getAttribute("href");if(a&&"/cdn-cgi/l/email-protection"==a.substr(0 ,27)){s='';j=28;r=parseInt(a.substr(j,2),16);for(j+=2;a.length-j&&a.substr(j,1)!='X';j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}j+=1;s+=a.substr(j,a.length-j);t.innerHTML=s.replace(/</g,"&lt;").replace(/>/g,"&gt;");l[i].setAttribute("href","mailto:"+t.value);}}catch(e){}}}catch(e){}})();
/* ]]> */
</script>


<div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/ZEbdHPQfV3x.htm" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div><script src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/nr-460.min.js"></script><script language="javascript" type="text/javascript" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/chartbeat.js"></script><script type="text/javascript" src="./Chapter 6  Modeling users   Ruby on Rails Tutorial   Softcover.io_files/1310fd97f1"></script></body></html>